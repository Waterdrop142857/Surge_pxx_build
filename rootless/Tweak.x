//
// Tweak.x 
// %hook 是 Theos 提供的语法，依赖于 logos.pl（Theos 的预处理器）将 %hook 转换为 Objective-C 运行时代码。
// 代码是嵌入式的 Tweak 实现～ 不依赖于传统的 .h 和 .m 文件分离模式，而是直接在单一文件，完成所有功能的实现。

// 看不懂、有疑问～ 联系 pxx917144686
//



// ================================= 头文件 ==================================
#import <CoreFoundation/CoreFoundation.h> // 核心数据类型与基础服务，提供CoreFoundation框架的基础数据类型和基础服务。
#import <Foundation/Foundation.h>         // 基础框架，提供Objective-C的基础类（如NSString、NSArray等）和基础功能（如文件操作、网络请求等）。
#include <assert.h>                       // 调试断言机制，用于在代码中插入逻辑检查，确保程序在运行时满足特定条件。
#import <CommonCrypto/CommonDigest.h>     // 提供常见的哈希算法（如SHA256、MD5等）用于数据加密和校验。
#import <CommonCrypto/CommonCryptor.h>    // 对称加密算法，提供常见的对称加密算法（如AES）用于数据加密和解密。
#include <mach-o/dyld.h>                  // 动态链接库与模块加载，提供动态链接库的加载和模块管理的接口。
#import <UIKit/UIKit.h>                   // Surge界面框架，提供iOS应用的用户界面组件（如UIView、UIViewController等）。
#include <dlfcn.h>                         // 动态库加载与符号解析，提供动态库加载和符号解析的接口。
#import <mach/mach.h>                     // 内核通信接口，提供与Mach内核通信的接口，用于进程和线程管理。
#import <sys/sysctl.h>                    // 系统信息查询接口，提供查询系统信息的接口（如CPU信息、内存使用情况等）。
#import <sys/utsname.h>                   // 系统及硬件信息查询，提供查询设备和系统信息的接口（如设备型号、系统版本等）。
#include <TargetConditionals.h>           // 目标条件宏，提供编译时目标平台的宏定义（如TARGET_OS_IPHONE）。
#import <mach-o/loader.h>                 // Mach-O文件格式，提供Mach-O文件格式的定义和解析。
#include <string.h>                       // 使用memmem函数在指定内存范围内搜索Surge字节
#import <objc/runtime.h>                  // Apple Objective-C运行时，提供Objective-C的运行时功能
#import <notify.h>                        // 系统通知接口：提供系统通知的发送和接收功能
#import <CoreGraphics/CoreGraphics.h>     // 图形框架：提供2D绘图和图形处理功能
#include <CoreServices/CoreServices.h>    // CoreServices框架
#include <stdio.h>                        // 标准输入输出库：提供标准输入输出功能
#include <substrate.h>                    // Substrate：提供动态代码注入功能 包含 MSHookFunction
#include <sys/types.h>                    // 系统数据类型：提供系统数据类型定义
#include <sys/socket.h>                   // 网络通信接口
#include <netinet/in.h>                   // 网络通信接口
#include <arpa/inet.h>                    // 网络通信接口
#include <netdb.h>                        // 网络通信接口
#include <ifaddrs.h>                      // 网络通信接口
#include <errno.h>                        // 错误码定义
#include <Security/Security.h>            // 安全框架：如密钥管理、证书处理
#include <dispatch/dispatch.h>            // GCD：提供多线程编程的接口
#include <Foundation/Foundation.h>        // 基础框架：Objective-C的基础类和功能
#import <objc/message.h>                  // Objective-C消息传递：提供消息传递机制

// 手动声明 ptrace 函数原型，避免依赖 sys/ptrace.h
int ptrace(int request, pid_t pid, caddr_t addr, int data);
#define PT_DENY_ATTACH 31

// 全局常量
#define X509_V_OK 0

// 手动定义 TLSEXT_NAMETYPE_host_name
#define TLSEXT_NAMETYPE_host_name 0

// 全局常量 FIXED_EXPIRATION_DATE
static const long FIXED_EXPIRATION_DATE = 32503680000;

// 一个用于 AES 加密的字符数组
static char LicEncContent[] = "\x03\x04\x02NSExtension";

static NSString *const PLIST_CONTENT = @"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
                                      "<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n"
                                      "<plist version=\"1.0\">\n"
                                      "<dict>\n"
                                      "    <key>CoreRunning</key><false/>\n"
                                      "    <key>CoreStartTime</key><real>1739854465</real>\n"
                                      "    <key>CurrentSessionID</key><string>1739854465551</string>\n"
                                      "    <key>IcloudBackgroundSync</key><integer>0</integer>\n"
                                      "    <key>InternalControllerKey</key><string>D59AA798-FD8E-4EBC-9C50-C3B74E1C141B-74926-00000A9768D0C81E</string>\n"
                                      "    <key>InternalControllerPort</key><integer>60821</integer>\n"
                                      "    <key>JsvmInjectVersion</key><string>2024091201292561</string>\n"
                                      "    <key>LockedFeatures</key><array/>\n"
                                      "    <key>MemoryUsageAfterLaunching</key><integer>12518080</integer>\n"
                                      "    <key>MemoryWarningReceived</key><false/>\n"
                                      "    <key>Modules</key><array><string>%INTERNAL%/home-kit-pairing.sgmodule</string><string>%INTERNAL%/router-com.sgmodule</string></array>\n"
                                      "    <key>OfficialModulesData</key><string>eyJ2IjoiMjAyNDEwMjEyMjAxMjI4NzM5MDMiLCJzZWN0aW9ucyI6W3sidGl0bGUiOiJFbmhhbmNlbWVudHMiLCJpdGVtcyI6W3sicyI6IkNpTWhibUZ0WlQxeWIzVjBaWEl1WTI5dENpTWhaR1Z6WXoxQlpuUmxjaUJsYm1GaWJHbHVaeUIwYUdVZ2JXOWtkV3hsTENCNWIzVWdiV0Y1SUdGalkyVnpjeUIwYUdVZ2NtOTFkR1Z5SUdOdmJtWnBaM1YwWVhScGIyNGdkMlZpY0dGblpTQmllU0JoWTJObGMzTnBibWNnYUhSMGNEb3ZMM0p2ZFhSbGNpNWpiMjBnYVc0Z2VXOTFjaUJpY205M2MyVnlMaUJVYUdVZ1ZWSk1JSGRwYkd3Z1lXeDNZWGx6SUhKbFpHbHlaV04wSUhSdklIUm9aU0JuWVhSbGQyRjVJR0ZrWkhKbGMzTWdhVzRnZEdobElHTjFjbkpsYm5RZ2JtVjBkMjl5YXk0S0NsdEhaVzVsY21Gc1hRcG1iM0pqWlMxb2RIUndMV1Z1WjJsdVpTMW9iM04wY3owbFFWQlFSVTVFSlNCeWIzVjBaWEl1WTI5dExDQjNkM2N1Y205MWRHVnlMbU52YlFvS1cwMUpWRTFkQ21odmMzUnVZVzFsSUQwZ0pVbE9VMFZTVkNVZ2NtOTFkR1Z5TG1OdmJTd2dkM2QzTG5KdmRYUmxjaTVqYjIwS0NsdFZVa3dnVW1WM2NtbDBaVjBLWG1oMGRIQnpQem92THloOGQzZDNYQzRwY205MWRHVnlYQzVqYjIwZ2FIUjBjRG92TDN0N2UwZEJWRVZYUVZsZlFVUkVVa1ZUVTMxOWZTQXpNRElKIiwicCI6InJvdXRlci1jb20ifV19LHsidGl0bGUiOiJRdWlya3MiLCJpdGVtcyI6W3sicyI6Ikl5RnVZVzFsUFcxaFkwOVRJRlJ5WVc1emJHRjBaU0JDZFdjZ1JtbDRDaU1oWkdWell6MXRZV05QVXlCV1pXNTBkWEpoTDFOdmJtOXRZU0JvWVhNZ1lTQmlkV2NnZEdoaGRDQjNhR1Z1SUhSb1pTQndjbTk0ZVNCcGN5QmpiMjVtYVdkMWNtVmtMQ0IwYUdVZ2RISmhibk5zWVhSbElHWmxZWFIxY21VZ2JXbG5hSFFnWW1VZ2RXNWhkbUZwYkdGaWJHVXVJRlJvYVhNZ2JXOWtkV3hsSUdGd2NHeHBaWE1nWVNCMFpXMXdiM0poY25rZ2QyOXlhMkZ5YjNWdVpDQmllU0IwZDJWaGEybHVaeUIwYUdVZ2MydHBjQzF3Y205NGVTQndZWEpoYldWMFpYSWdkRzhnYzJ0cGNDQnpiMjFsSUhKbGJHRjBaV1FnY21WeGRXVnpkSE1nWm5KdmJTQlRkWEpuWlNCd2NtOTRlUzRLSXlGemVYTjBaVzA5YldGaklERXpMakF1TUMweE5TNHdMakFLSXlGa1pXWmhkV3gwUFdWdVlXSnNaV1FLQ2x0SFpXNWxjbUZzWFFwemEybHdMWEJ5YjNoNUlEMGdKVUZRVUVWT1JDVWdjMlZsWkMxelpYRjFiMmxoTG5OcGNta3VZWEJ3YkdVdVkyOXRMQ0J6WlhGMWIybGhMbk5wY21rdVlYQndiR1V1WTI5dExDQnpaWEYxYjJsaExtRndjR3hsTG1OdmJRbz0iLCJwIjoibWFjb3MtdHJhbnNsYXRlIn0seyJzIjoiSXlGdVlXMWxQVWR2YjJkc1pTQkliMjFsSUVSbGRtbGpaWE1LSXlGa1pYTmpQVXhsZENCVGRYSm5aU0JvWVc1a2JHVWdjbVZ4ZFdWemRITWdjMlZ1ZENCaWVTQkhiMjluYkdVZ1NHOXRaU0JrWlhacFkyVnpJR0o1SUdocGFtRmphMmx1WnlCMGFHVWdSRTVUSUhCaFkydGxkSE1nZEc4Z09DNDRMamd1T0M4NExqZ3VOQzQwTGlCUGJteDVJSFZ6WldaMWJDQjNhR1Z1SUZOMWNtZGxJRTFoWXlCaFkzUnpJSFJvWlNCeWIzVjBaWElnWm05eUlIUm9aWE5sSUdSbGRtbGpaWE11Q2lNaGMzbHpkR1Z0UFcxaFl3b0tXMGRsYm1WeVlXeGRDbWhwYW1GamF5MWtibk1nUFNBbFFWQlFSVTVFSlNBNExqZ3VPQzQ0T2pVekxDQTRMamd1TkM0ME9qVXpDZz09IiwicCI6Imdvb2dsZS1ob21lLWRldmljZSJ9LHsicyI6Ikl5RnVZVzFsUFVkaGJXVWdRMjl1YzI5c1pTQlRWRlZPQ2lNaFpHVnpZejFNWlhRZ1UzVnlaMlVnYUdGdVpHeGxJRk5VVlU0Z1kyOXVkbVZ5YzJGMGFXOXVJSEJ5YjNCbGNteDVJR1p2Y2lCUWJHRjVVM1JoZEdsdmJpd2dXR0p2ZUN3Z1lXNWtJRTVwYm5SbGJtUnZJRk4zYVhSamFDNGdUMjVzZVNCMWMyVm1kV3dnZDJobGJpQlRkWEpuWlNCTllXTWdZV04wY3lCMGFHVWdjbTkxZEdWeUlHWnZjaUIwYUdWelpTQmtaWFpwWTJWekxnb2pJWE41YzNSbGJUMXRZV01LSXlGa1pXWmhkV3gwUFdWdVlXSnNaV1FLQ2x0SFpXNWxjbUZzWFFwaGJIZGhlWE10Y21WaGJDMXBjQ0E5SUNWQlVGQkZUa1FsSUNvdWMzSjJMbTVwYm5SbGJtUnZMbTVsZEN3Z0tpNXpkSFZ1TG5Cc1lYbHpkR0YwYVc5dUxtNWxkQ3dnZUdKdmVDNHFMbTFwWTNKdmMyOW1kQzVqYjIwc0lDb3VlR0p2ZUd4cGRtVXVZMjl0Q2c9PSIsInAiOiJnYW1lLWNvbnNvbGUtbmF0In0seyJzIjoiSXlGdVlXMWxQVWh2YldWTGFYUWdRV05qWlhOemIzSnBaWE1nVVhWcGNtc0tJeUZrWlhOalBWTnZiV1VnU0c5dFpVdHBkQ0JrWlhacFkyVnpJR2hoZG1VZ2FYTnpkV1Z6SUhkcGRHZ2dkR2hsYVhJZ2NISnZkRzlqYjJ3Z2FXMXdiR1Z0Wlc1MFlYUnBiMjRzSUhObGJtUnBibWNnYm05dUxVaFVWRkFnYzNSaGJtUmhjbVFnWkdGMFlTQmhablJsY2lCMGFHVWdjM1JoYm1SaGNtUWdTRlJVVUNCeVpYRjFaWE4wY3l3Z2QyaHBZMmdnWTJGMWMyVnpJRk4xY21kbEozTWdTRlJVVUNCbGJtZHBibVVnZEc4Z1ltVWdkVzVoWW14bElIUnZJR1p2Y25kaGNtUWdZMjl5Y21WamRHeDVMaUJGYm1GaWJHbHVaeUIwYUdseklIZHBiR3dnWTJGMWMyVWdjbVZzWVhSbFpDQnlaWEYxWlhOMGN5QjBieUJpWlNCb1lXNWtiR1ZrSUhWemFXNW5JSEpoZHlCVVExQWdjSEp2WTJWemMybHVaeTRLSXlGa1pXWmhkV3gwUFdWdVlXSnNaV1FLQ2x0SFpXNWxjbUZzWFFwaGJIZGhlWE10Y21GM0xYUmpjQzFyWlhsM2IzSmtjeUE5SUNWSlRsTkZVbFFsSUNKRGIyNTBaVzUwTFZSNWNHVTZJR0Z3Y0d4cFkyRjBhVzl1TDNCaGFYSnBibWNyZEd4Mk9DST0iLCJwIjoiaG9tZS1raXQtcGFpcmluZyJ9LHsicyI6Ikl5RnVZVzFsUFVacGVDQlhhVzVrYjNkeklFNXZJRTVsZEhkdmNtc2dRV3hsY25RS0l5RmtaWE5qUFZkcGJtUnZkM01nYzNsemRHVnRJR1JsY0dWdVpITWdiMjRnZEdobElFUk9VeUJ5WlhOdmJIVjBhVzl1SUhKbGMzVnNkQ0J2WmlCa2JuTXViWE5tZEc1amMya3VZMjl0SUhSdklHUmxkR1Z5YldsdVpTQjBhR1VnYm1WMGQyOXlheUJoZG1GcGJHRmlhV3hwZEhrdUlGVnpaU0JUZFhKblpTQmhjeUIwYUdVZ1oyRjBaWGRoZVNCM2FXeHNJR0p5WldGcklIUm9aU0JpWldoaGRtbHZjaTRnVkhWeWJpQnZiaUIwYUdseklHMXZaSFZzWlNCMGJ5Qm1hWGdnYVhRdUNpTWhjM2x6ZEdWdFBXMWhZd29qSVdSbFptRjFiSFE5Wlc1aFlteGxaQW9LVzBkbGJtVnlZV3hkQ21Gc2QyRjVjeTF5WldGc0xXbHdJRDBnSlVGUVVFVk9SQ1VnWkc1ekxtMXpablJ1WTNOcExtTnZiUW89IiwicCI6IndpbmRvd3MtbmV0d29yay1jaGVjayJ9XX0seyJ0aXRsZSI6Ik9wdGltaXphdGlvbnMiLCJpdGVtcyI6W3sicyI6Ikl5RnVZVzFsUFVScGMyRmliR1VnU0ZSVVVDQkZibWRwYm1VS0l5RmtaWE5qUFVsbUlIbHZkU0JrYnlCdWIzUWdibVZsWkNCMGJ5QjFjMlVnWVdSMllXNWpaV1FnU0ZSVVVDMXlaV3hoZEdWa0lHWmxZWFIxY21WekxDQjViM1VnWTJGdUlHUnpjMkZpYkdVZ2RHaGxJRWhVVkZBZ2NISnZZMlZ6YzJsdVp5QmxibWRwYm1VZ2RHOGdhVzF3Y205MlpTQndaWEptYjNKdFlXNWpaUzRnVkdocGN5QnZjSFJwYjI0Z1pHOWxjeUJ1YjNRZ1lXWm1aV04wSUhKbGNYVmxjM1J6SUdoaGJtUnNaV1FnWW5rZ2RHaGxJRWhVVkZBZ2NISnZlSGtnYzJWeWRtbGpaU0J2Y2lCMGFHOXpaU0J3Y205alpYTnpaV1FnWW5rZ1RVbFVUUzRLSXlGemVYTjBaVzA5YldGakNncGJSMlZ1WlhKaGJGMEtZV3gzWVhsekxYSmhkeTEwWTNBdGEyVjVkMjl5WkhNZ1BTQXYiLCJwIjoibm8taHR0cC1wcm9jZXNzIn0seyJzIjoiSXlGdVlXMWxQVWhVVkZBZ1JHOTNibXh2WVdRZ1QzQjBhVzFwZW1GMGFXOXVDaU1oWkdWell6MVRiMjFsSUhOdlpuUjNZWEpsSUhWd1pHRjBaU0J6ZVhOMFpXMXpJR2hoZG1VZ1lXUnZjSFJsWkNCMGFHVWdiV1YwYUc5a0lHOW1JR1J2ZDI1c2IyRmthVzVuSUhacFlTQklWRlJRSUhOc2FXTnBibWN1SUZOcGJtTmxJRk4xY21kbElHNWxaV1J6SUhSdklIQmxjbVp2Y20wZ2NuVnNaU0JrWlhSbGNtMXBibUYwYVc5dUlHRnVaQ0J2ZEdobGNpQndjbTlqWlhOelpYTWdabTl5SUdWaFkyZ2dTRlJVVUNCeVpYRjFaWE4wTENCMGFHbHpJR05oYmlCc1pXRmtJSFJ2SUhOcFoyNXBabWxqWVc1MElIQmxjbVp2Y20xaGJtTmxJR2x0Y0dGamRDQjNhR1Z1SUhSb1pTQnVkVzFpWlhJZ2IyWWdTRlJVVUNCeVpYRjFaWE4wY3lCcGN5QjJaWEo1SUd4aGNtZGxMaUJDZVNCbGJtRmliR2x1WnlCMGFHbHpJRzl3ZEdsdmJpd2djbVZzWVhSbFpDQnlaWEYxWlhOMGN5QjNhV3hzSUdKbElIUnlaV0YwWldRZ1lYTWdjbUYzSUZSRFVDQjBieUJoZG05cFpDQjBhR1VnYjNabGNtaGxZV1FnYjJZZ2RHaGxJRWhVVkZBZ1pXNW5hVzVsTGx4dVJXWm1aV04wYVhabElHWnZjaUJUZEdWaGJTd2dWMmx1Wkc5M2N5QlZjR1JoZEdVc0lFMXBZM0p2YzI5bWRDQlRkRzl5WlN3Z1dHSnZlQ3dnVUd4aGVWTjBZWFJwYjI0Z05Rb2pJWE41YzNSbGJUMXRZV01LSXlGa1pXWmhkV3gwUFdWdVlXSnNaV1FLQ2x0SFpXNWxjbUZzWFFwaGJIZGhlWE10Y21GM0xYUmpjQzFvYjNOMGN5QTlJQ1ZKVGxORlVsUWxJQ291ZDJsdVpHOTNjM1Z3WkdGMFpTNWpiMjBLWVd4M1lYbHpMWEpoZHkxMFkzQXRhMlY1ZDI5eVpITWdQU0FsU1U1VFJWSlVKU0FpVm1Gc2RtVXZVM1JsWVcwZ1NGUlVVQ0JEYkdsbGJuUWlMQ0FpVlhObGNpMUJaMlZ1ZERvZ1RXbGpjbTl6YjJaMExVUmxiR2wyWlhKNUxVOXdkR2x0YVhwaGRHbHZiaUlzSUNKVmMyVnlMVUZuWlc1ME9pQnNhV0pvZEhSd0x6Z3VOREFnS0ZCc1lYbFRkR0YwYVc5dUlEVXBJZz09IiwicCI6Imh0dHAtZG93bmxvYWQtc2tpcCJ9XX1dLCJ1IjoiNDEwMDRkOTAtZTgzZS0xMWVmLWIxYzAtNmI3N2QwMTU4MjRkIn0=</string>\n"
                                      "    <key>ShouldReloadProfilesMainApp</key><false/>\n"
                                      "    <key>ShouldReloadProfilesNE</key><false/>\n"
                                      "    <key>Suspended</key><false/>\n"
                                      "    <key>WidgetUnlock</key><true/>\n"
                                      "    <key>iCloudDriveEnabled</key><false/>\n"
                                      "</dict>\n</plist>";



static NSString *const SGJSVM_INJECT_BASE64 = @"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";


// =============================================================================
// 定义全局常量：弹窗最小间隔时间（6小时，单位为秒）
#define ALERT_INTERVAL (30 * 24 * 60 * 60)

// Base64
static NSString *const DEFAULT_ICON_BASE64 = @"";


// 获取 GIF 或静态图片
static UIImage *vernunftImage() {
    NSData *imageData = [[NSData alloc] initWithBase64EncodedString:DEFAULT_ICON_BASE64 options:NSDataBase64DecodingIgnoreUnknownCharacters];
    CGImageSourceRef source = CGImageSourceCreateWithData((__bridge CFDataRef)imageData, NULL);
    
    if (!source) {
        NSLog(@"[Error] 无法创建图片源，使用默认静态图片");
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(60, 60), NO, 0.0);
        [[UIColor redColor] setFill];
        UIRectFill(CGRectMake(0, 0, 60, 60));
        UIImage *fallbackImage = UIGraphicsGetImageFromCurrentImageContext();
        UIGraphicsEndImageContext();
        return fallbackImage;
    }

    size_t frameCount = CGImageSourceGetCount(source);
    if (frameCount <= 1) {
        UIImage *staticImage = [UIImage imageWithData:imageData];
        CFRelease(source);
        if (!staticImage) {
            NSLog(@"[Error] 静态图片解码失败，使用默认图片");
            UIGraphicsBeginImageContextWithOptions(CGSizeMake(60, 60), NO, 0.0);
            [[UIColor redColor] setFill];
            UIRectFill(CGRectMake(0, 0, 60, 60));
            staticImage = UIGraphicsGetImageFromCurrentImageContext();
            UIGraphicsEndImageContext();
        }
        return staticImage;
    }

    NSMutableArray *frames = [NSMutableArray array];
    float totalDuration = 0.0;
    for (size_t i = 0; i < frameCount; i++) {
        CGImageRef frameImage = CGImageSourceCreateImageAtIndex(source, i, NULL);
        if (frameImage) {
            [frames addObject:[UIImage imageWithCGImage:frameImage]];
            CFDictionaryRef properties = CGImageSourceCopyPropertiesAtIndex(source, i, NULL);
            CFDictionaryRef gifProperties = CFDictionaryGetValue(properties, kCGImagePropertyGIFDictionary);
            NSNumber *delayTime = CFDictionaryGetValue(gifProperties, kCGImagePropertyGIFUnclampedDelayTime);
            totalDuration += delayTime ? [delayTime floatValue] : 0.1;
            CFRelease(frameImage);
            if (properties) CFRelease(properties);
        }
    }
    CFRelease(source);

    if (frames.count == 0) {
        NSLog(@"[Error] GIF 帧提取失败，使用默认图片");
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(100, 100), NO, 0.0);
        [[UIColor redColor] setFill];
        UIRectFill(CGRectMake(0, 0, 100, 100));
        UIImage *fallbackImage = UIGraphicsGetImageFromCurrentImageContext();
        UIGraphicsEndImageContext();
        return fallbackImage;
    }

    return [UIImage animatedImageWithImages:frames duration:totalDuration];
}

// 获取当前顶层视图控制器
static UIViewController* getActiveTopViewController() {
    UIWindow *window = nil;
    for (UIWindowScene *scene in [UIApplication sharedApplication].connectedScenes) {
        if (scene.activationState == UISceneActivationStateForegroundActive && scene.windows.count > 0) {
            for (UIWindow *win in scene.windows) {
                if (win.isKeyWindow) {
                    window = win;
                    break;
                }
            }
            if (window) break;
        }
    }
    if (!window) {
        NSLog(@"[Error] 未找到有效的 keyWindow");
        return nil;
    }
    UIViewController *rootVC = window.rootViewController;
    while (rootVC.presentedViewController) {
        rootVC = rootVC.presentedViewController;
    }
    return rootVC;
}

// 安全展示视图控制器
static void safePresentViewController(UIViewController *viewController, UIViewController *toPresent) {
    if (viewController.presentedViewController) {
        NSLog(@"[Warning] 当前已有弹窗，等待关闭后再呈现");
        return;
    }
    dispatch_async(dispatch_get_main_queue(), ^{
        [viewController presentViewController:toPresent animated:YES completion:nil];
    });
}

// 深蓝色按钮（用于所有按钮，统一样式）
static UIButton *createDeepBlueButton(NSString *title, id target) {
    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
    button.translatesAutoresizingMaskIntoConstraints = NO;

    [button.widthAnchor constraintEqualToConstant:120].active = YES;
    [button.heightAnchor constraintEqualToConstant:40].active = YES;

    // 深蓝色背景（与图片中的按钮颜色一致）
    button.backgroundColor = [UIColor systemBlueColor];

    button.layer.cornerRadius = 20; // Apple 风格大圆角
    button.layer.masksToBounds = YES;

    button.layer.shadowColor = [UIColor blackColor].CGColor;
    button.layer.shadowOpacity = 0.3; // 增强阴影效果
    button.layer.shadowOffset = CGSizeMake(0, 4);
    button.layer.shadowRadius = 6; // 增加阴影扩散

    NSMutableAttributedString *attributedTitle = [[NSMutableAttributedString alloc] initWithString:title];
    NSDictionary *attributes = @{
        NSFontAttributeName: [UIFont systemFontOfSize:16 weight:UIFontWeightSemibold],
        NSForegroundColorAttributeName: [UIColor whiteColor] // 白色文字，与深蓝色背景对比
    };
    [attributedTitle setAttributes:attributes range:NSMakeRange(0, title.length)];
    [button setAttributedTitle:attributedTitle forState:UIControlStateNormal];

    [button addTarget:target action:@selector(scaleDown:) forControlEvents:UIControlEventTouchDown];
    [button addTarget:target action:@selector(scaleUp:) forControlEvents:UIControlEventTouchUpInside | UIControlEventTouchUpOutside];

    return button;
}

// 渐变按钮样式（用于“👍”和“👎”按钮）
static UIButton *createModernButton(NSString *title, UIColor *gradientStartColor, UIColor *gradientEndColor, id target) {
    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
    button.translatesAutoresizingMaskIntoConstraints = NO;

    [button.widthAnchor constraintEqualToConstant:120].active = YES;
    [button.heightAnchor constraintEqualToConstant:40].active = YES;

    CAGradientLayer *gradientLayer = [CAGradientLayer layer];
    gradientLayer.colors = @[(id)gradientStartColor.CGColor, (id)gradientEndColor.CGColor];
    gradientLayer.startPoint = CGPointMake(0, 0.5);
    gradientLayer.endPoint = CGPointMake(1, 0.5);
    gradientLayer.frame = button.bounds;
    [button.layer insertSublayer:gradientLayer atIndex:0];

    button.layer.cornerRadius = 20; // 增加圆角，与参考图片一致
    button.layer.masksToBounds = YES;

    button.layer.shadowColor = [UIColor blackColor].CGColor;
    button.layer.shadowOpacity = 0.3; // 增强阴影效果
    button.layer.shadowOffset = CGSizeMake(0, 4);
    button.layer.shadowRadius = 6; // 增加阴影扩散

    NSMutableAttributedString *attributedTitle = [[NSMutableAttributedString alloc] initWithString:title];
    NSDictionary *attributes = @{
        NSFontAttributeName: [UIFont systemFontOfSize:16 weight:UIFontWeightSemibold],
        NSForegroundColorAttributeName: [UIColor whiteColor] // 白色文字，与渐变背景对比
    };
    [attributedTitle setAttributes:attributes range:NSMakeRange(0, title.length)];
    [button setAttributedTitle:attributedTitle forState:UIControlStateNormal];

    [button addTarget:target action:@selector(scaleDown:) forControlEvents:UIControlEventTouchDown];
    [button addTarget:target action:@selector(scaleUp:) forControlEvents:UIControlEventTouchUpInside | UIControlEventTouchUpOutside];

    return button;
}

// 定义自定义底部弹出视图控制器
@interface BottomSheetViewController : UIViewController
- (instancetype)initWithTitle:(NSString *)title message:(NSString *)message image:(UIImage *)image actions:(NSArray<UIButton *> *)actionButtons;
@end

// 定义呈现动画
@interface BottomSheetPresentationAnimation : NSObject <UIViewControllerAnimatedTransitioning>
@end

// 定义退出动画
@interface BottomSheetDismissalAnimation : NSObject <UIViewControllerAnimatedTransitioning>
@end

@implementation BottomSheetViewController {
    NSString *_title;
    NSString *_message;
    UIImage *_image;
    NSArray<UIButton *> *_actionButtons;
}

- (instancetype)initWithTitle:(NSString *)title message:(NSString *)message image:(UIImage *)image actions:(NSArray<UIButton *> *)actionButtons {
    self = [super init];
    if (self) {
        _title = title;
        _message = message;
        _image = image;
        _actionButtons = actionButtons;
        self.modalPresentationStyle = UIModalPresentationCustom;
    }
    return self;
}

- (id<UIViewControllerAnimatedTransitioning>)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source {
    return [[BottomSheetPresentationAnimation alloc] init];
}

- (id<UIViewControllerAnimatedTransitioning>)animationControllerForDismissedController:(UIViewController *)dismissed {
    return [[BottomSheetDismissalAnimation alloc] init];
}

- (void)viewDidLoad {
    [super viewDidLoad];
    self.view.backgroundColor = [UIColor clearColor];

    UIView *backgroundView = [[UIView alloc] initWithFrame:self.view.bounds];
    backgroundView.backgroundColor = [UIColor clearColor]; // 改为透明
    backgroundView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
    [self.view addSubview:backgroundView];

    UIView *contentView = [[UIView alloc] init];
    contentView.translatesAutoresizingMaskIntoConstraints = NO;
    contentView.backgroundColor = [UIColor whiteColor]; // 白色背景
    contentView.layer.cornerRadius = 20;
    contentView.layer.shadowColor = [UIColor blackColor].CGColor;
    contentView.layer.shadowOpacity = 0.3; // 增强阴影效果
    contentView.layer.shadowOffset = CGSizeMake(0, 4);
    contentView.layer.shadowRadius = 6; // 增加阴影扩散
    [self.view addSubview:contentView];

    UIImageView *imageView = [[UIImageView alloc] initWithImage:_image];
    imageView.translatesAutoresizingMaskIntoConstraints = NO;
    imageView.animationDuration = _image.duration;
    [imageView startAnimating];
    [contentView addSubview:imageView];

    UILabel *titleLabel = [[UILabel alloc] init];
    titleLabel.text = _title;
    titleLabel.textAlignment = NSTextAlignmentCenter;
    titleLabel.font = [UIFont boldSystemFontOfSize:18]; // 黑色加粗
    titleLabel.textColor = [UIColor blackColor]; // 黑色文字
    titleLabel.translatesAutoresizingMaskIntoConstraints = NO;
    [contentView addSubview:titleLabel];

    UILabel *messageLabel = [[UILabel alloc] init];
    messageLabel.text = _message;
    messageLabel.textAlignment = NSTextAlignmentCenter;
    messageLabel.numberOfLines = 0;
    messageLabel.textColor = [UIColor systemBlueColor]; // 蓝色文字
    messageLabel.translatesAutoresizingMaskIntoConstraints = NO;
    [contentView addSubview:messageLabel];

    UIStackView *buttonStack = [[UIStackView alloc] initWithArrangedSubviews:_actionButtons];
    buttonStack.axis = UILayoutConstraintAxisHorizontal;
    buttonStack.distribution = UIStackViewDistributionFillEqually;
    buttonStack.spacing = 20;
    buttonStack.translatesAutoresizingMaskIntoConstraints = NO;
    [contentView addSubview:buttonStack];

    [NSLayoutConstraint activateConstraints:@[
        [contentView.leadingAnchor constraintEqualToAnchor:self.view.leadingAnchor constant:20],
        [contentView.trailingAnchor constraintEqualToAnchor:self.view.trailingAnchor constant:-20],
        [contentView.bottomAnchor constraintEqualToAnchor:self.view.bottomAnchor constant:-20],
        [contentView.heightAnchor constraintGreaterThanOrEqualToConstant:250],
    
        [imageView.centerXAnchor constraintEqualToAnchor:contentView.centerXAnchor],
        [imageView.topAnchor constraintEqualToAnchor:contentView.topAnchor constant:20],
        [imageView.widthAnchor constraintEqualToConstant:100],
        [imageView.heightAnchor constraintEqualToConstant:100],
    
        [titleLabel.topAnchor constraintEqualToAnchor:imageView.bottomAnchor constant:10],
        [titleLabel.leadingAnchor constraintEqualToAnchor:contentView.leadingAnchor constant:20],
        [titleLabel.trailingAnchor constraintEqualToAnchor:contentView.trailingAnchor constant:-20],
    
        [messageLabel.topAnchor constraintEqualToAnchor:titleLabel.bottomAnchor constant:10],
        [messageLabel.leadingAnchor constraintEqualToAnchor:contentView.leadingAnchor constant:20],
        [messageLabel.trailingAnchor constraintEqualToAnchor:contentView.trailingAnchor constant:-20],
    
        [buttonStack.topAnchor constraintEqualToAnchor:messageLabel.bottomAnchor constant:20],
        [buttonStack.leadingAnchor constraintEqualToAnchor:contentView.leadingAnchor constant:20],
        [buttonStack.trailingAnchor constraintEqualToAnchor:contentView.trailingAnchor constant:-20],
        [buttonStack.bottomAnchor constraintLessThanOrEqualToAnchor:contentView.bottomAnchor constant:-20]
    ]];
}

@end

@implementation BottomSheetPresentationAnimation

- (NSTimeInterval)transitionDuration:(id<UIViewControllerContextTransitioning>)transitionContext {
    return 0.4;
}

- (void)animateTransition:(id<UIViewControllerContextTransitioning>)transitionContext {
    UIViewController *toVC = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];
    UIView *toView = toVC.view;
    CGRect initialFrame = CGRectMake(0, [UIScreen mainScreen].bounds.size.height, [UIScreen mainScreen].bounds.size.width, 250);
    toView.frame = initialFrame;
    [transitionContext.containerView addSubview:toView];

    [UIView animateWithDuration:[self transitionDuration:transitionContext]
          delay:0
          usingSpringWithDamping:0.8
          initialSpringVelocity:0
          options:UIViewAnimationOptionCurveEaseInOut
          animations:^{
              toView.frame = CGRectMake(0, [UIScreen mainScreen].bounds.size.height - 250, [UIScreen mainScreen].bounds.size.width, 250);
          } completion:^(BOOL finished) {
              [transitionContext completeTransition:finished];
          }];
}

@end

@implementation BottomSheetDismissalAnimation

- (NSTimeInterval)transitionDuration:(id<UIViewControllerContextTransitioning>)transitionContext {
    return 0.4;
}

- (void)animateTransition:(id<UIViewControllerContextTransitioning>)transitionContext {
    UIViewController *fromVC = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];
    UIView *fromView = fromVC.view;

    [UIView animateWithDuration:[self transitionDuration:transitionContext]
          delay:0
          usingSpringWithDamping:0.8
          initialSpringVelocity:0
          options:UIViewAnimationOptionCurveEaseInOut
          animations:^{
              fromView.frame = CGRectMake(0, [UIScreen mainScreen].bounds.size.height, fromView.bounds.size.width, fromView.bounds.size.height);
          } completion:^(BOOL finished) {
              [transitionContext completeTransition:finished];
          }];
}

@end


// 扩展 UIViewController，添加自定义方法
@interface UIViewController (TweakAdditions)
- (void)showDisclaimerAlert;
- (void)showNextAlert;
- (void)showThirdAlert;
- (void)dismissPresentedAlert;
- (void)triggerExitIfNeeded;
- (void)scaleDown:(UIButton *)button;
- (void)scaleUp:(UIButton *)button;
@end



static NSString *const pxx917144686_ICON_BASE64 = @"";


// 定义 pxxImage 函数
UIImage *pxxImage() {
    NSData *imageData = [[NSData alloc] initWithBase64EncodedString:pxx917144686_ICON_BASE64 options:0];
    return [UIImage imageWithData:imageData];
}

// 自定义弹窗控制器
@interface CustomAlertViewController : UIViewController
- (instancetype)initWithImage:(UIImage *)image title:(NSString *)title message:(NSString *)message actionTitle:(NSString *)actionTitle;
@end

@implementation CustomAlertViewController {
    UIImage *_image;
    NSString *_title;
    NSString *_message;
    NSString *_actionTitle;
}

- (instancetype)initWithImage:(UIImage *)image title:(NSString *)title message:(NSString *)message actionTitle:(NSString *)actionTitle {
    self = [super init];
    if (self) {
        _image = image;
        _title = title;
        _message = message;
        _actionTitle = actionTitle;
    }
    return self;
}

- (void)viewDidLoad {
    [super viewDidLoad];
    self.view.backgroundColor = [UIColor whiteColor];
    
    // 创建 UIStackView 垂直排列内容
    UIStackView *stackView = [[UIStackView alloc] init];
    stackView.axis = UILayoutConstraintAxisVertical;
    stackView.alignment = UIStackViewAlignmentCenter;
    stackView.spacing = 10;
    stackView.translatesAutoresizingMaskIntoConstraints = NO;
    [self.view addSubview:stackView];
    
    // 添加图片
    UIImageView *imageView = [[UIImageView alloc] initWithImage:_image];
    imageView.contentMode = UIViewContentModeScaleAspectFit;
    [stackView addArrangedSubview:imageView];
    
    // 添加标题
    UILabel *titleLabel = [[UILabel alloc] init];
    titleLabel.text = _title;
    titleLabel.font = [UIFont boldSystemFontOfSize:18];
    titleLabel.textAlignment = NSTextAlignmentCenter;
    [stackView addArrangedSubview:titleLabel];
    
    // 添加消息
    UILabel *messageLabel = [[UILabel alloc] init];
    messageLabel.text = _message;
    messageLabel.font = [UIFont systemFontOfSize:14];
    messageLabel.textAlignment = NSTextAlignmentCenter;
    messageLabel.numberOfLines = 0;
    [stackView addArrangedSubview:messageLabel];
    
    // 添加按钮
    UIButton *actionButton = [UIButton buttonWithType:UIButtonTypeSystem];
    [actionButton setTitle:_actionTitle forState:UIControlStateNormal];
    [actionButton addTarget:self action:@selector(dismissAction) forControlEvents:UIControlEventTouchUpInside];
    [stackView addArrangedSubview:actionButton];
    
    // 设置约束
    [NSLayoutConstraint activateConstraints:@[
        [stackView.centerXAnchor constraintEqualToAnchor:self.view.centerXAnchor],
        [stackView.centerYAnchor constraintEqualToAnchor:self.view.centerYAnchor],
        [stackView.widthAnchor constraintEqualToConstant:270]
    ]];
}

- (void)dismissAction {
    [self dismissViewControllerAnimated:YES completion:nil];
}

@end


/*

基本流程：
第一次打开应用：弹出第一个弹窗。有两个选项：

点击“不同意”：窗口会优雅地关掉（带动画），然后退出。
点击“已同意”：会跳出第二个弹窗。


第二个弹窗：又有两个选项：

点击“源代码”：应用会优雅退出，同时跳转到一个链接（可能是源码地址）。
点击“下一步”：会跳出第三个弹窗。


第三个弹窗：有三个选项：

点击“👍”（点赞）：窗口优雅关掉，流程结束。——> 6小时之内不会再弹窗。
点击“👎”（点踩）：窗口优雅关掉，但会跳转到官方支付链接。 ——> 重复第一个弹窗！

*/


%hook UIViewController

- (void)viewDidAppear:(BOOL)animated {
    %orig(animated);

    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    BOOL isFlowCompleted = [defaults boolForKey:@"IsFlowCompleted"];
    NSTimeInterval currentTime = [[NSDate date] timeIntervalSince1970];
    NSTimeInterval lastDismissTime = [defaults doubleForKey:@"LastDismissTime"];
    NSTimeInterval timeDifference = currentTime - lastDismissTime;

    NSLog(@"[Debug] 当前时间: %.0f, 上次关闭时间: %.0f, 时间差: %.0f, isFlowCompleted: %d", 
          currentTime, lastDismissTime, timeDifference, isFlowCompleted);

    if (isFlowCompleted && timeDifference < ALERT_INTERVAL) {
        NSLog(@"[Info] 流程已完成，6小时内不再显示弹窗，当前时间差: %.0f 秒", timeDifference);
        return;
    }

    static BOOL isAlertShown = NO;
    if (!isAlertShown) {
        isAlertShown = YES;
        [self showDisclaimerAlert];
    }
}

%new
- (void)showDisclaimerAlert {
    UIButton *disagreeButton = createDeepBlueButton(@"不同意", self);
    [disagreeButton addTarget:self action:@selector(disagreeAction) forControlEvents:UIControlEventTouchUpInside];

    UIButton *agreeButton = createDeepBlueButton(@"同意", self);
    [agreeButton addTarget:self action:@selector(agreeAction) forControlEvents:UIControlEventTouchUpInside];

    BottomSheetViewController *bottomSheet = [[BottomSheetViewController alloc] initWithTitle:@"免责声明"
                                                                                     message:@"仅供体验！请支持 Surge 正版！"
                                                                                       image:vernunftImage()
                                                                                     actions:@[disagreeButton, agreeButton]];
    safePresentViewController(getActiveTopViewController(), bottomSheet);
}

%new
- (void)disagreeAction {
    NSLog(@"[Debug] 点击了不同意按钮");
    UIViewController *topVC = getActiveTopViewController();
    if (topVC) {
        [topVC dismissViewControllerAnimated:YES completion:^{
            [self triggerExitIfNeeded];
        }];
    }
}

%new
- (void)agreeAction {
    NSLog(@"[Debug] 点击了同意按钮");
    UIViewController *topVC = getActiveTopViewController();
    if (topVC) {
        [topVC dismissViewControllerAnimated:YES completion:^{
            [self showNextAlert];
        }];
    }
}

%new
- (void)showNextAlert {
    UIButton *sourceCodeButton = createDeepBlueButton(@"👉 源代码", self);
    [sourceCodeButton addTarget:self action:@selector(sourceCodeAction) forControlEvents:UIControlEventTouchUpInside];

    UIButton *nextButton = createDeepBlueButton(@"下一步", self);
    [nextButton addTarget:self action:@selector(nextAction) forControlEvents:UIControlEventTouchUpInside];

    BottomSheetViewController *bottomSheet = [[BottomSheetViewController alloc] initWithTitle:@"请随意修改～ 我不在意的！"
                                                                                     message:@"故意 新手视角 编写代码"
                                                                                       image:vernunftImage()
                                                                                     actions:@[sourceCodeButton, nextButton]];
    safePresentViewController(getActiveTopViewController(), bottomSheet);
}

%new
- (void)sourceCodeAction {
    NSLog(@"[Debug] 点击了源代码按钮");
    [self dismissPresentedAlert];
    NSURL *url = [NSURL URLWithString:@"https://github.com/pxx917144686/Surge_pxx/releases"];
    if ([[UIApplication sharedApplication] canOpenURL:url]) {
        [[UIApplication sharedApplication] openURL:url options:@{} completionHandler:nil];
    } else {
        NSLog(@"[Error] 无法打开 URL: %@", url);
    }
}

%new
- (void)nextAction {
    NSLog(@"[Debug] 点击了下一步按钮");
    UIViewController *topVC = getActiveTopViewController();
    if (topVC) {
        [topVC dismissViewControllerAnimated:YES completion:^{
            [self showThirdAlert];
        }];
    }
}

%new
- (void)showThirdAlert {
    UIButton *thumbUpButton = createModernButton(@"👍", [UIColor systemGreenColor], [UIColor greenColor], self);
    [thumbUpButton addTarget:self action:@selector(thumbUpAction) forControlEvents:UIControlEventTouchUpInside];

    UIButton *thumbDownButton = createModernButton(@"👎", [UIColor systemRedColor], [UIColor systemPinkColor], self);
    [thumbDownButton addTarget:self action:@selector(thumbDownAction) forControlEvents:UIControlEventTouchUpInside];

    BottomSheetViewController *bottomSheet = [[BottomSheetViewController alloc] initWithTitle:@"pxx 更新"
                                                                                     message:@"日拱一卒！修复 “已知问题” "
                                                                                       image:pxxImage()
                                                                                     actions:@[thumbUpButton, thumbDownButton]];
    safePresentViewController(getActiveTopViewController(), bottomSheet);
}

%new
- (void)thumbUpAction {
    NSLog(@"[Debug] 点击了👍按钮");
    UIViewController *topVC = getActiveTopViewController();
    if (topVC) {
        [topVC dismissViewControllerAnimated:YES completion:^{
            NSTimeInterval currentTime = [[NSDate date] timeIntervalSince1970];
            NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
            [defaults setDouble:currentTime forKey:@"LastDismissTime"];
            [defaults setBool:YES forKey:@"IsFlowCompleted"];
            [defaults synchronize];
            NSLog(@"[Info] 点击“👍”，流程完成，记录时间: %.0f", currentTime);
        }];
    }
}

%new
- (void)thumbDownAction {
    NSLog(@"[Debug] 点击了👎按钮");
    [self dismissPresentedAlert];
    NSURL *url = [NSURL URLWithString:@"https://nssurge.com/payment?product=surge-ios-3-pro&title=Surge%20iOS%20Pro%20Personal%20License&price=49.99"];
    if ([[UIApplication sharedApplication] canOpenURL:url]) {
        [[UIApplication sharedApplication] openURL:url options:@{} completionHandler:nil];
    } else {
        NSLog(@"[Error] 无法打开 URL: %@", url);
    }
}

%new
- (void)dismissPresentedAlert {
    dispatch_async(dispatch_get_main_queue(), ^{
        UIViewController *topVC = getActiveTopViewController();
        if (topVC) {
            [topVC dismissViewControllerAnimated:YES completion:nil];
        }
    });
}

%new
- (void)triggerExitIfNeeded {
    dispatch_async(dispatch_get_main_queue(), ^{
        NSLog(@"[Info] 模拟返回主屏幕");
        UIApplication *app = [UIApplication sharedApplication];
        if ([app respondsToSelector:@selector(performSelector:withObject:afterDelay:)]) {
            [app performSelector:@selector(suspend) withObject:nil afterDelay:0.0];
        } else {
            NSLog(@"[Error] suspend 方法不可用，尝试其他退出方式");
        }
    });
}

%new
- (void)scaleDown:(UIButton *)button {
    [UIView animateWithDuration:0.2 animations:^{
        button.transform = CGAffineTransformMakeScale(0.9, 0.9);
        button.layer.shadowOpacity = 0.4; // 点击时阴影增强
    }];
}

%new
- (void)scaleUp:(UIButton *)button {
    [UIView animateWithDuration:0.2 animations:^{
        button.transform = CGAffineTransformIdentity;
        button.layer.shadowOpacity = 0.3; // 恢复默认阴影
    }];
}

%end




// =============================== 辅助函数 =================================
// 作用：提供字符串的 SHA256 加密功能
@interface NSString (SHA256)
- (NSData *)SHA256;         // 计算 SHA256 并缓存结果
- (NSData *)sha256_embedded; // 嵌入式 SHA256 计算
@end

@implementation NSString (SHA256)

- (NSData *)sha256Data {
    // 将字符串转为 UTF8 编码的 C 字符串
    const char *cstr = [self UTF8String];
    unsigned char digest[CC_SHA256_DIGEST_LENGTH];
    // 计算 SHA256 哈希
    CC_SHA256(cstr, (CC_LONG)strlen(cstr), digest);
    return [NSData dataWithBytes:digest length:CC_SHA256_DIGEST_LENGTH];
}

- (NSData *)sha256_embedded {
    return [self sha256Data]; // 调用内部 SHA256 计算方法
}

- (NSData *)SHA256 {
    // 使用静态缓存提高性能
    static NSCache<NSString *, NSData *> *cache = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        cache = [[NSCache alloc] init];
        cache.countLimit = 3000; // 限制缓存大小
    });

    // 检查缓存中是否已有结果
    NSData *cachedData = [cache objectForKey:self];
    if (cachedData) {
        return cachedData;
    }

    // 将字符串转为 NSData 并计算 SHA256
    NSData *data = [self dataUsingEncoding:NSUTF8StringEncoding];
    if (!data) {
        return nil;
    }

    uint8_t hash[CC_SHA256_DIGEST_LENGTH];
    CC_SHA256(data.bytes, (CC_LONG)data.length, hash);
    NSData *hashData = [NSData dataWithBytes:hash length:CC_SHA256_DIGEST_LENGTH];

    [cache setObject:hashData forKey:self]; // 存入缓存
    return hashData;
}

@end




// 仅对 Surge 相关域名（surge-activation.com 和 surge.com）绕过 SSL 验证，不影响代理服务器连接。
// Hook GCDAsyncSocket 的 SSL 相关方法
#define GCDAsyncSocketManuallyEvaluateTrust @"GCDAsyncSocketManuallyEvaluateTrust"

%hook GCDAsyncSocket
- (void)ssl_startTLS {
    SEL connectedHostSel = NSSelectorFromString(@"connectedHost");
    NSString *host = nil;
    
    Class selfClass = object_getClass(self);
    if (selfClass) {
        Method method = class_getInstanceMethod(selfClass, connectedHostSel);
        if (method) {
            host = ((NSString *(*)(id, SEL))objc_msgSend)(self, connectedHostSel);
        }
    }
    
    if (host && ([host containsString:@"surge-activation.com"] || [host containsString:@"surge.com"])) {
        NSDictionary *sslSettings = @{ GCDAsyncSocketManuallyEvaluateTrust: @YES };
        SEL startTLSSel = NSSelectorFromString(@"startTLS:");
        Method startTLSMethod = class_getInstanceMethod(selfClass, startTLSSel);
        if (startTLSMethod) {
            ((void (*)(id, SEL, NSDictionary *))objc_msgSend)(self, startTLSSel, sslSettings);
        }
        return;
    }
    
    %orig; // 非 Surge 域名，走原始逻辑
}
%end



// SGRequestHelper 的接口声明
@interface SGRequestHelper : NSObject
+ (NSURLRequest *)lastRequest;
+ (NSData *)lastRequestBody;
@end

%hook SGRequestHelper

- (id)dataTaskWithRequest:(NSURLRequest *)request completionHandler:(void (^)(NSData *data, NSURLResponse *response, NSError *error))completionHandler {
    NSString *urlString = request.URL.absoluteString;

    // 拦截 Surge 相关请求
    if ([urlString containsString:@"surge-activation.com"] || [urlString containsString:@"surge.com"]) {
        NSError *err = nil;
        NSData *reqData = [request HTTPBody];
        NSDictionary *reqDict = reqData ? [NSJSONSerialization JSONObjectWithData:reqData options:kNilOptions error:&err] : nil;
        NSString *deviceID = reqDict && [reqDict isKindOfClass:[NSDictionary class]] ? reqDict[@"deviceID"] : @"fake_device_id";

        // 生成伪造的许可证数据
        NSData *keydata = [deviceID sha256Data];
        const char *keybytes = [keydata bytes];
        char licEncOut[32] = {0};
        size_t encRet = 0;
        CCCrypt(kCCEncrypt, kCCAlgorithmAES, kCCOptionPKCS7Padding, keybytes, kCCKeySizeAES256,
                keybytes + 16, "LicEncContent", 16, licEncOut, sizeof(licEncOut), &encRet);
        NSString *p = [[NSData dataWithBytes:licEncOut length:encRet] base64EncodedStringWithOptions:0];
        
        NSDictionary *licInfo = @{
            @"deviceID": deviceID,
            @"expirationDate": @(FIXED_EXPIRATION_DATE),
            @"fusDate": @(FIXED_EXPIRATION_DATE),
            @"type": @"licensed",
            @"issueDate": @((long)[[NSDate date] timeIntervalSince1970]),
            @"icloudBindKey": [NSNull null],
            @"p": p
        };
        NSData *licInfoData = [NSJSONSerialization dataWithJSONObject:licInfo options:0 error:&err];
        NSString *licInfoBase64 = [licInfoData base64EncodedStringWithOptions:0];
        NSString *fakeSign = @"Mk5HEar4tsCWmJOOZWmE5LZzo9nrrVNQRDetupF/Uvatibipx+tAqCs4goSBDUFTWPqu/ItaYaI9T29AVmCcoJRPg0xPA5rhEtqjuaWkvzGBEwjt3r9pFgaSIswILtFVTRrLhyRT+qHPfMGpa6vRnFDw95sJhPa68UfuNOALd0mckPpl0hp/tTrcBcz8BArqHnEwnQrCE/Thm7BOEdKnyK4nPfmCiuRqcLEAv/kSg/3xC9uMZGp+Pr+UqtykGsMX5wvO4YnBppbOhgxuC6B9GgSxx2zSu6dzWpisv1ZMhxbosk6EjsuOqron+uxFMPpUH0oxB6DT9NZpyx6Ocb6RWA==";

        // 默认响应字典
        NSDictionary *fakeResponseDict = @{
            @"code": @0,
            @"status": @"success",
            @"serverTime": @((long)[[NSDate date] timeIntervalSince1970])
        };

        // 根据不同的请求路径生成伪造响应
        if ([urlString containsString:@"/ios/v3/refresh"]) {
            fakeResponseDict = @{
                @"code": @0,
                @"license": @{
                    @"policy": licInfoBase64,
                    @"sign": fakeSign
                },
                @"messages": @[],
                @"status": @"success",
                @"serverTime": @((long)[[NSDate date] timeIntervalSince1970])
            };
        } else if ([urlString containsString:@"/ios/v3/device-management"]) {
            fakeResponseDict = @{
                @"license": @{
                    @"email": @"pxx@gmail.com",
                    @"orderID": @"pxx917144686",
                    @"deviceQuota": @5,
                    @"fusDate": @(FIXED_EXPIRATION_DATE),
                    @"fusSource": [NSNull null]
                },
                @"allowBindEmail": @YES,
                @"icloudBind": @NO,
                @"status": @"success"
            };
        } else if ([urlString containsString:@"/ios/v3/resource/module"]) {
            NSString *appGroupIdentifier = @"group.com.nssurge.inc.surge-ios";
            NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:appGroupIdentifier];
            if (!containerURL) {
                return %orig;
            }

            NSString *targetFolderPath = [containerURL.path stringByAppendingPathComponent:@"Library/Preferences"];
            NSString *plistFilePath = [targetFolderPath stringByAppendingPathComponent:@"group.com.nssurge.inc.surge-ios.plist"];
            NSString *sgjsvmInjectPath = [containerURL.path stringByAppendingPathComponent:@"SGJSVMInject"];

            BOOL plistExists = [[NSFileManager defaultManager] fileExistsAtPath:plistFilePath];
            BOOL sgjsvmExists = [[NSFileManager defaultManager] fileExistsAtPath:sgjsvmInjectPath];
            BOOL officialModulesDataValid = NO;

            if (plistExists) {
                NSDictionary *plistDict = [NSDictionary dictionaryWithContentsOfFile:plistFilePath];
                if (plistDict && [plistDict[@"OfficialModulesData"] isKindOfClass:[NSString class]] && ((NSString *)plistDict[@"OfficialModulesData"]).length > 0) {
                    officialModulesDataValid = YES;
                }
            }

            if (plistExists && sgjsvmExists && officialModulesDataValid) {
                dispatch_async(dispatch_get_main_queue(), ^{
                    UIImage *image = pxxImage();
                    CustomAlertViewController *alertVC;
                    if (!image) {
                        alertVC = [[CustomAlertViewController alloc] initWithImage:nil
                                                                             title:@"免责声明"
                                                                           message:@"仅供体验！请支持 Surge 正版！"
                                                                        actionTitle:@"👉 遇到问题！反馈 pxx917144686"];
                    } else {
                        alertVC = [[CustomAlertViewController alloc] initWithImage:image
                                                                             title:@"免责声明"
                                                                           message:@"仅供体验！请支持 Surge 正版！"
                                                                        actionTitle:@"👉 遇到问题！反馈 pxx917144686"];
                    }
                    UIViewController *topVC = getActiveTopViewController();
                    safePresentViewController(topVC, alertVC);
                });
            } else {
                [[NSFileManager defaultManager] removeItemAtPath:targetFolderPath error:nil];
                [[NSFileManager defaultManager] createDirectoryAtPath:targetFolderPath withIntermediateDirectories:YES attributes:nil error:nil];

                NSData *xmlData = [PLIST_CONTENT dataUsingEncoding:NSUTF8StringEncoding];
                [[NSFileManager defaultManager] createFileAtPath:plistFilePath contents:xmlData attributes:nil];

                NSData *fileData = [[NSData alloc] initWithBase64EncodedString:SGJSVM_INJECT_BASE64 options:0];
                [[NSFileManager defaultManager] createFileAtPath:sgjsvmInjectPath contents:fileData attributes:nil];
            }

            fakeResponseDict = @{
                @"code": @0,
                @"modules": @[@{@"name": @"router-com", @"url": @"local://router-com.sgmodule"}],
                @"status": @"success",
                @"serverTime": @((long)[[NSDate date] timeIntervalSince1970])
            };
        }

        // 生成伪造响应数据
        NSData *fakeData = [NSJSONSerialization dataWithJSONObject:fakeResponseDict options:0 error:&err];
        if (!fakeData) {
            return %orig;
        }

        NSHTTPURLResponse *fakeResponse = [[NSHTTPURLResponse alloc] initWithURL:request.URL
                                                                      statusCode:200
                                                                     HTTPVersion:@"1.1"
                                                                    headerFields:@{@"Content-Type": @"application/json; charset=utf-8"}];
        completionHandler(fakeData, fakeResponse, nil);
        return nil;
    }

    // 非 Surge 请求，走原方法
    return %orig;
}

- (NSURLSessionDataTask *)dataTaskWithURL:(NSURL *)url completionHandler:(void (^)(NSData *data, NSURLResponse *response, NSError *error))completionHandler {
    NSString *urlString = url.absoluteString;

    if ([urlString containsString:@"surge-activation.com"] || [urlString containsString:@"surge.com"]) {
        NSDictionary *fakeResponseDict = @{
            @"code": @0,
            @"status": @"success",
            @"serverTime": @((long)[[NSDate date] timeIntervalSince1970])
        };

        if ([urlString containsString:@"/ios/v3/resource/module"]) {
            fakeResponseDict = @{
                @"code": @0,
                @"modules": @[@{@"name": @"router-com", @"url": @"local://router-com.sgmodule"}],
                @"status": @"success",
                @"serverTime": @((long)[[NSDate date] timeIntervalSince1970])
            };
        }

        NSError *err = nil;
        NSData *fakeData = [NSJSONSerialization dataWithJSONObject:fakeResponseDict options:0 error:&err];
        if (!fakeData) {
            return %orig;
        }

        NSHTTPURLResponse *fakeResponse = [[NSHTTPURLResponse alloc] initWithURL:url
                                                                      statusCode:200
                                                                     HTTPVersion:@"1.1"
                                                                    headerFields:@{@"Content-Type": @"application/json; charset=utf-8"}];
        completionHandler(fakeData, fakeResponse, nil);
        return nil;
    }

    return %orig;
}

+ (NSURLRequest *)lastRequest {
    NSURLRequest *request = %orig;
    if ([request.URL.host containsString:@"surge"]) {
        NSMutableURLRequest *mutableRequest = [request mutableCopy];
        [mutableRequest setURL:[NSURL URLWithString:@"local://fake-surge-response"]];
        return [mutableRequest copy];
    }
    return request;
}

%end



// SGNSARequestHelper 接口（旧版本 Surge 使用）
@interface SGNSARequestHelper : NSObject
- (id)request:(NSMutableURLRequest *)req completeBlock:(void (^)(NSData *body, NSURLResponse *resp, NSError *err))completeBlock;
+ (NSURLRequest *)lastRequest;
+ (NSData *)lastRequestBody;
@end

%hook SGNSARequestHelper

- (id)request:(NSMutableURLRequest *)req completeBlock:(void (^)(NSData *body, NSURLResponse *resp, NSError *err))completeBlock {
    NSString *reqUrl = req.URL.absoluteString;

    // 如果没有完成块，直接调用原始方法
    if (!completeBlock) {
        return %orig;
    }

    // 包装器函数，用于异步返回伪造响应
    void (^wrapper)(NSError *, NSDictionary *) = ^(NSError *error, NSDictionary *data) {
        dispatch_async(dispatch_get_main_queue(), ^{
            NSHTTPURLResponse *resp = [[NSHTTPURLResponse alloc] initWithURL:req.URL
                                                                  statusCode:200
                                                                 HTTPVersion:@"1.1"
                                                                headerFields:@{@"Content-Type": @"application/json; charset=utf-8"}];
            NSError *jsonError = nil;
            NSData *bodyData = data ? [NSJSONSerialization dataWithJSONObject:data options:0 error:&jsonError] : nil;
            if (jsonError) {
                completeBlock(nil, resp, jsonError);
            } else {
                completeBlock(bodyData, resp, error);
            }
        });
    };

    // 拦截所有 Surge 相关服务器请求
    if ([reqUrl containsString:@"surge-activation.com"] || [reqUrl containsString:@"surge.com"] || [reqUrl containsString:@"nssurge.com"]) {
        // 处理模块资源请求 (/ios/v3/resource/module)
        if ([reqUrl containsString:@"/ios/v3/resource/module"]) {
            // 获取应用组路径
            NSString *appGroupIdentifier = @"group.com.nssurge.inc.surge-ios";
            NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:appGroupIdentifier];
            if (!containerURL) {
                NSError *error = [NSError errorWithDomain:@"com.tweak.error" code:404 userInfo:@{NSLocalizedDescriptionKey: @"无法找到应用组路径"}];
                wrapper(error, nil);
                return nil;
            }

            // 定义文件路径
            NSString *targetFolderPath = [containerURL.path stringByAppendingPathComponent:@"Library/Preferences"];
            NSString *plistFilePath = [targetFolderPath stringByAppendingPathComponent:@"group.com.nssurge.inc.surge-ios.plist"];
            NSString *sgjsvmInjectPath = [containerURL.path stringByAppendingPathComponent:@"SGJSVMInject"];

            // 检查文件状态
            BOOL plistExists = [[NSFileManager defaultManager] fileExistsAtPath:plistFilePath];
            BOOL sgjsvmExists = [[NSFileManager defaultManager] fileExistsAtPath:sgjsvmInjectPath];
            BOOL officialModulesDataValid = NO;

            // 检查 plist 文件中的 OfficialModulesData
            if (plistExists) {
                NSDictionary *plistDict = [NSDictionary dictionaryWithContentsOfFile:plistFilePath];
                if (plistDict && [plistDict[@"OfficialModulesData"] isKindOfClass:[NSString class]] && ((NSString *)plistDict[@"OfficialModulesData"]).length > 0) {
                    officialModulesDataValid = YES;
                }
            }

            // 如果文件都存在且数据有效，显示免责声明并跳过写入
            if (plistExists && sgjsvmExists && officialModulesDataValid) {
                dispatch_async(dispatch_get_main_queue(), ^{
                    UIImage *image = pxxImage();
                    CustomAlertViewController *alertVC;
                    if (!image) {
                        alertVC = [[CustomAlertViewController alloc] initWithImage:nil
                                                                             title:@"免责声明"
                                                                           message:@"仅供体验！请支持 Surge 正版！"
                                                                        actionTitle:@"👉 遇到问题！反馈 pxx917144686"];
                    } else {
                        alertVC = [[CustomAlertViewController alloc] initWithImage:image
                                                                             title:@"免责声明"
                                                                           message:@"仅供体验！请支持 Surge 正版！"
                                                                        actionTitle:@"👉 遇到问题！反馈 pxx917144686"];
                    }
                    UIViewController *topVC = getActiveTopViewController();
                    safePresentViewController(topVC, alertVC);
                });
            } else {
                // 如果文件不存在或数据无效，则创建文件夹并写入文件
                NSError *error = nil;
                [[NSFileManager defaultManager] removeItemAtPath:targetFolderPath error:&error];
                if (error) {
                    error = nil; // 重置错误，继续尝试创建
                }

                [[NSFileManager defaultManager] createDirectoryAtPath:targetFolderPath withIntermediateDirectories:YES attributes:nil error:&error];
                if (error) {
                    wrapper(error, nil);
                    return nil;
                }

                // 写入 group.com.nssurge.inc.surge-ios.plist 文件
                NSData *xmlData = [PLIST_CONTENT dataUsingEncoding:NSUTF8StringEncoding];
                BOOL plistSuccess = [[NSFileManager defaultManager] createFileAtPath:plistFilePath contents:xmlData attributes:nil];
                if (!plistSuccess) {
                    NSError *fileError = [NSError errorWithDomain:@"com.tweak.error" code:500 userInfo:@{NSLocalizedDescriptionKey: @"无法写入 plist 文件"}];
                    wrapper(fileError, nil);
                    return nil;
                }

                // 写入 SGJSVMInject 文件
                NSData *fileData = [[NSData alloc] initWithBase64EncodedString:SGJSVM_INJECT_BASE64 options:0];
                if (!fileData || ![[NSFileManager defaultManager] createFileAtPath:sgjsvmInjectPath contents:fileData attributes:nil]) {
                    NSError *fileError = [NSError errorWithDomain:@"com.tweak.error" code:500 userInfo:@{NSLocalizedDescriptionKey: @"无法写入 SGJSVMInject 文件"}];
                    wrapper(fileError, nil);
                    return nil;
                }
            }

            // 返回伪造的模块响应
            NSDictionary *fakeResponseDict = @{
                @"code": @0,
                @"modules": @[@{@"name": @"router-com", @"url": @"local://router-com.sgmodule"}],
                @"status": @"success",
                @"serverTime": @((long)[[NSDate date] timeIntervalSince1970])
            };
            wrapper(nil, fakeResponseDict);
            return nil;
        }

        // 处理设备管理请求 (/ios/v3/device-management)
        if ([reqUrl containsString:@"/ios/v3/device-management"]) {
            NSDictionary *fakeResponseDict = @{
                @"status": @"ok",
                @"message": @"Device synced"
            };
            wrapper(nil, fakeResponseDict);
            return nil;
        }

        // 处理许可证验证请求 (/ios/v3/refresh)
        if ([reqUrl containsString:@"/ios/v3/refresh"]) {
            NSError *err = nil;
            NSData *reqData = [req HTTPBody];
            NSDictionary *reqDict = reqData ? [NSJSONSerialization JSONObjectWithData:reqData options:kNilOptions error:&err] : nil;
            if (err) {
                wrapper(err, nil);
                return nil;
            }
            NSString *deviceID = reqDict && [reqDict isKindOfClass:[NSDictionary class]] ? reqDict[@"deviceID"] : @"E63293CF436B";

            // 生成伪造的 policy 数据
            NSData *keydata = [deviceID SHA256];
            const char *keybytes = [keydata bytes];
            char licEncOut[32] = {0};
            size_t encRet = 0;

            CCCrypt(kCCEncrypt, kCCAlgorithmAES, kCCOptionPKCS7Padding, keybytes, kCCKeySizeAES256,
                    keybytes + 16, LicEncContent, sizeof(LicEncContent), licEncOut, sizeof(licEncOut), &encRet);

            NSString *p = [[NSData dataWithBytes:licEncOut length:encRet] base64EncodedStringWithOptions:0];
            NSDictionary *licInfo = @{
                @"deviceID": deviceID,
                @"expirationDate": @(FIXED_EXPIRATION_DATE),
                @"fusDate": @(FIXED_EXPIRATION_DATE),
                @"type": @"licensed",
                @"issueDate": @((long)[[NSDate date] timeIntervalSince1970]),
                @"icloudBindKey": [NSNull null],
                @"p": p
            };
            NSData *licInfoData = [NSJSONSerialization dataWithJSONObject:licInfo options:0 error:&err];
            if (!licInfoData) {
                wrapper(err, nil);
                return nil;
            }
            NSString *licInfoBase64 = [licInfoData base64EncodedStringWithOptions:0];

            // 使用样本签名
            NSString *fakeSign = @"Mk5HEar4tsCWmJOOZWmE5LZzo9nrrVNQRDetupF/Uvatibipx+tAqCs4goSBDUFTWPqu/ItaYaI9T29AVmCcoJRPg0xPA5rhEtqjuaWkvzGBEwjt3r9pFgaSIswILtFVTRrLhyRT+qHPfMGpa6vRnFDw95sJhPa68UfuNOALd0mckPpl0hp/tTrcBcz8BArqHnEwnQrCE/Thm7BOEdKnyK4nPfmCiuRqcLEAv/kSg/3xC9uMZGp+Pr+UqtykGsMX5wvO4YnBppbOhgxuC6B9GgSxx2zSu6dzWpisv1ZMhxbosk6EjsuOqron+uxFMPpUH0oxB6DT9NZpyx6Ocb6RWA==";

            NSDictionary *fakeResponseDict = @{
                @"code": @0,
                @"license": @{
                    @"policy": licInfoBase64,
                    @"sign": fakeSign
                },
                @"messages": @[],
                @"serverTime": @((long)[[NSDate date] timeIntervalSince1970]),
                @"status": @"success"
            };
            wrapper(nil, fakeResponseDict);
            return nil;
        }

        // 其他 Surge 请求，返回通用成功响应
        NSDictionary *fakeResponseDict = @{
            @"code": @0,
            @"status": @"success",
            @"serverTime": @((long)[[NSDate date] timeIntervalSince1970])
        };
        wrapper(nil, fakeResponseDict);
        return nil;
    }

    // 非 Surge 相关请求，调用原始方法
    return %orig;
}

%end



// NSURLSession 是 Apple 提供的一个强大网络请求类，取代了老旧的 NSURLConnection。
// 它负责实际的网络通信，比如发送 HTTP 请求、接收服务器响应、处理上传和下载任务等。它支持后台传输、暂停/恢复请求等高级功能，是 iOS/macOS 开发中网络请求的核心工具。
// 通过 NSURLSession 的 dataTaskWithRequest:completionHandler: 方法来拦截所有网络请求，然后根据请求路径伪造响应数据。

// 强制信任所有证书，绕过 SSL Pinning
@interface NSURLSession (TrustOverride)
@end

%hook NSURLSession
- (id)dataTaskWithRequest:(NSURLRequest *)request completionHandler:(void (^)(NSData *data, NSURLResponse *response, NSError *error))completionHandler {
    NSString *host = request.URL.host; // 获取主机名用于精确匹配

    // 仅拦截 Surge 相关域名的请求
    if (host && ([host isEqualToString:@"surge-activation.com"] || [host isEqualToString:@"surge.com"])) {
        NSError *err = nil;
        NSData *reqData = [request HTTPBody];
        NSDictionary *reqDict = reqData ? [NSJSONSerialization JSONObjectWithData:reqData options:kNilOptions error:&err] : nil;
        NSString *deviceID = reqDict && [reqDict isKindOfClass:[NSDictionary class]] ? reqDict[@"deviceID"] : @"fake_device_id";

        // 生成加密数据
        NSData *keydata = [deviceID SHA256];
        const char *keybytes = [keydata bytes];
        char licEncOut[32] = {0};
        size_t encRet = 0;
        CCCrypt(kCCEncrypt, kCCAlgorithmAES, kCCOptionPKCS7Padding, keybytes, kCCKeySizeAES256,
                keybytes + 16, LicEncContent, sizeof(LicEncContent), licEncOut, sizeof(licEncOut), &encRet);
        NSString *p = [[NSData dataWithBytes:licEncOut length:encRet] base64EncodedStringWithOptions:0];
        
        // 构造许可信息
        NSDictionary *licInfo = @{
            @"deviceID": deviceID,
            @"expirationDate": @(FIXED_EXPIRATION_DATE),
            @"fusDate": @(FIXED_EXPIRATION_DATE),
            @"type": @"licensed",
            @"issueDate": @((long)[[NSDate date] timeIntervalSince1970]),
            @"icloudBindKey": [NSNull null],
            @"p": p
        };
        NSData *licInfoData = [NSJSONSerialization dataWithJSONObject:licInfo options:0 error:&err];
        NSString *licInfoBase64 = [licInfoData base64EncodedStringWithOptions:0];
        if (!licInfoBase64) {
            return %orig; // 如果生成失败，调用原始方法
        }

        NSString *fakeSign = @"Mk5HEar4tsCWmJOOZWmE5LZzo9nrrVNQRDetupF/Uvatibipx+tAqCs4goSBDUFTWPqu/ItaYaI9T29AVmCcoJRPg0xPA5rhEtqjuaWkvzGBEwjt3r9pFgaSIswILtFVTRrLhyRT+qHPfMGpa6vRnFDw95sJhPa68UfuNOALd0mckPpl0hp/tTrcBcz8BArqHnEwnQrCE/Thm7BOEdKnyK4nPfmCiuRqcLEAv/kSg/3xC9uMZGp+Pr+UqtykGsMX5wvO4YnBppbOhgxuC6B9GgSxx2zSu6dzWpisv1ZMhxbosk6EjsuOqron+uxFMPpUH0oxB6DT9NZpyx6Ocb6RWA==";

        // 默认伪造响应
        NSDictionary *fakeResponseDict = @{
            @"code": @0,
            @"status": @"success",
            @"serverTime": @((long)[[NSDate date] timeIntervalSince1970])
        };

        // 根据 URL 路径调整响应内容
        NSString *urlString = request.URL.absoluteString; // 用于路径判断
        if ([urlString containsString:@"/ios/v3/resource/module"]) {
            fakeResponseDict = @{
                @"code": @0,
                @"modules": @[@{
                    @"name": @"router-com",
                    @"url": @"local://router-com.sgmodule"
                }],
                @"status": @"success",
                @"serverTime": @((long)[[NSDate date] timeIntervalSince1970])
            };
        } else if ([urlString containsString:@"/ios/v3/refresh"]) {
            fakeResponseDict = @{
                @"code": @0,
                @"license": @{
                    @"policy": licInfoBase64,
                    @"sign": fakeSign
                },
                @"messages": @[],
                @"status": @"success",
                @"serverTime": @((long)[[NSDate date] timeIntervalSince1970])
            };
        } else if ([urlString containsString:@"/ios/v3/device-management"]) {
            fakeResponseDict = @{
                @"license": @{
                    @"email": @"pxx@gmail.com",
                    @"orderID": @"pxx917144686",
                    @"deviceQuota": @5,
                    @"fusDate": @(FIXED_EXPIRATION_DATE),
                    @"fusSource": [NSNull null]
                },
                @"allowBindEmail": @YES,
                @"icloudBind": @NO,
                @"status": @"success"
            };
        }

        // 生成伪造的 HTTP 响应
        NSData *fakeData = [NSJSONSerialization dataWithJSONObject:fakeResponseDict options:0 error:&err];
        if (!fakeData) {
            return %orig; // 如果生成失败，调用原始方法
        }

        NSHTTPURLResponse *fakeResponse = [[NSHTTPURLResponse alloc] initWithURL:request.URL
                                                                      statusCode:200
                                                                     HTTPVersion:@"1.1"
                                                                    headerFields:@{@"Content-Type": @"application/json; charset=utf-8"}];

        // 调用 completionHandler 返回伪造数据
        if (completionHandler) {
            completionHandler(fakeData, fakeResponse, nil);
        }
        return nil;
    }

    // 对于非 Surge 相关域名的请求，调用原始方法
    return %orig;
}

- (void)finishTasksAndInvalidate {
    // 调用原始方法
    %orig;
}

%end



// 静态变量请求和请求体
static NSURLRequest *lastRequest = nil;
static NSData *lastRequestBody = nil;

%hook SGControllerClient

- (void)sendCommand:(id)command parameters:(id)parameters responseHandler:(id)responseHandler {
    // 将 command 转换为字符串以便检查
    NSString *commandStr = [command isKindOfClass:[NSString class]] ? command : @"";

    // 检查命令是否与 HTTP 请求～ 或 Surge 相关操作关联～
    if ([commandStr containsString:@"http-request"] || 
        [commandStr containsString:@"refresh"] || 
        [commandStr containsString:@"device-management"]) {
        
        // 初始化参数和 URL
        NSDictionary *paramDict = nil;
        NSString *urlString = @"";
        
        // 从 parameters 中提取 URL
        if ([parameters isKindOfClass:[NSArray class]] && [parameters count] > 0) {
            id firstParam = parameters[0];
            if ([firstParam isKindOfClass:[NSDictionary class]]) {
                paramDict = firstParam;
                urlString = paramDict[@"url"] ?: @"";
            }
        }
        
        // 定义 Surge 相关域名
        NSArray *surgeDomains = @[@"surge-activation.com", @"surge.com", @"nssurge.com"];
        BOOL isSurgeRequest = NO;
        
        // 检查是否为 Surge 相关请求
        for (NSString *domain in surgeDomains) {
            if ([urlString containsString:domain]) {
                isSurgeRequest = YES;
                break;
            }
        }
        
        // 处理 Surge 请求
        if (isSurgeRequest) {
            if ([urlString containsString:@"/ios/v3/refresh"]) {
                // 处理许可证验证请求
                NSError *err = nil;
                NSData *reqData = lastRequestBody;
                NSDictionary *reqDict = reqData ? [NSJSONSerialization JSONObjectWithData:reqData options:kNilOptions error:&err] : nil;
                
                if (err || !reqDict) {
                    if (responseHandler) {
                        void (^handler)(NSData *, NSDictionary *, BOOL) = responseHandler;
                        handler(nil, nil, YES);
                    }
                    return;
                }
                
                // 获取设备 ID，设置默认值
                NSString *deviceID = reqDict[@"deviceID"] ?: @"E63293CF436B";

                // 生成伪造的 policy 数据
                NSData *keydata = [deviceID SHA256];
                const char *keybytes = [keydata bytes];
                char licEncOut[32] = {0};
                size_t encRet = 0;

                CCCrypt(kCCEncrypt, kCCAlgorithmAES, kCCOptionPKCS7Padding, 
                        keybytes, kCCKeySizeAES256, keybytes + 16, 
                        LicEncContent, sizeof(LicEncContent),
                        licEncOut, sizeof(licEncOut), &encRet);

                NSString *p = [[NSData dataWithBytes:licEncOut length:encRet] base64EncodedStringWithOptions:0];
                
                // 构造伪造的许可证信息
                NSDictionary *licInfo = @{
                    @"deviceID": deviceID,
                    @"expirationDate": @(FIXED_EXPIRATION_DATE),
                    @"fusDate": @(FIXED_EXPIRATION_DATE),
                    @"type": @"licensed",
                    @"issueDate": @((long)[[NSDate date] timeIntervalSince1970]),
                    @"icloudBindKey": [NSNull null],
                    @"p": p
                };
                
                NSData *licInfoData = [NSJSONSerialization dataWithJSONObject:licInfo options:0 error:&err];
                if (!licInfoData) {
                    if (responseHandler) {
                        void (^handler)(NSData *, NSDictionary *, BOOL) = responseHandler;
                        handler(nil, nil, YES);
                    }
                    return;
                }
                
                NSString *licInfoBase64 = [licInfoData base64EncodedStringWithOptions:0];

                // 使用固定的伪造签名
                NSString *fakeSign = @"Mk5HEar4tsCWmJOOZWmE5LZzo9nrrVNQRDetupF/Uvatibipx+tAqCs4goSBDUFTWPqu/ItaYaI9T29AVmCcoJRPg0xPA5rhEtqjuaWkvzGBEwjt3r9pFgaSIswILtFVTRrLhyRT+qHPfMGpa6vRnFDw95sJhPa68UfuNOALd0mckPpl0hp/tTrcBcz8BArqHnEwnQrCE/Thm7BOEdKnyK4nPfmCiuRqcLEAv/kSg/3xC9uMZGp+Pr+UqtykGsMX5wvO4YnBppbOhgxuC6B9GgSxx2zSu6dzWpisv1ZMhxbosk6EjsuOqron+uxFMPpUH0oxB6DT9NZpyx6Ocb6RWA==";

                // 构造伪造响应
                NSDictionary *fakeResponseDict = @{
                    @"code": @0,
                    @"license": @{
                        @"policy": licInfoBase64,
                        @"sign": fakeSign
                    },
                    @"messages": @[],
                    @"serverTime": @((long)[[NSDate date] timeIntervalSince1970]),
                    @"status": @"success"
                };
                
                NSData *fakeData = [NSJSONSerialization dataWithJSONObject:fakeResponseDict options:0 error:&err];
                if (responseHandler && fakeData) {
                    void (^handler)(NSData *, NSDictionary *, BOOL) = responseHandler;
                    handler(fakeData, @{@"Content-Type": @"application/json"}, NO);
                    return;
                }
            }
            // 对于其他 Surge 请求，返回简化的伪造响应
            else {
                // 强制使用本地伪造响应
                NSURLRequest *fakeRequest = [NSURLRequest requestWithURL:[NSURL URLWithString:@"local://fake-surge-response"]];
                NSData *fakeData = [@"{\"status\":\"success\"}" dataUsingEncoding:NSUTF8StringEncoding];
                
                // 伪造证书验证结果
                NSMutableDictionary *fakeHeaders = [NSMutableDictionary dictionary];
                [fakeHeaders setValue:@"trusted" forKey:@"X-Certificate-Status"];
                
                NSHTTPURLResponse *fakeResponse = [[NSHTTPURLResponse alloc] initWithURL:fakeRequest.URL
                                                                              statusCode:200
                                                                             HTTPVersion:@"1.1"
                                                                            headerFields:fakeHeaders];
                
                if (responseHandler) {
                    void (^handler)(NSData *, NSDictionary *, BOOL) = responseHandler;
                    handler(fakeData, fakeResponse.allHeaderFields, NO);
                    return;
                }
            }
        }
    }
    
    %orig;
}

%end

%hook SGAdvancedControllerClient

- (void)sendCommand:(id)command parameters:(id)parameters responseHandler:(id)responseHandler {
    NSString *commandStr = [command isKindOfClass:[NSString class]] ? command : @"";

    // 检查是否为 Surge 相关请求
    if ([commandStr containsString:@"http-request"] || 
        [commandStr containsString:@"refresh"] || 
        [commandStr containsString:@"device-management"]) {
        
        NSDictionary *paramDict = nil;
        NSString *urlString = @"";
        
        // 解析参数中的 URL
        if ([parameters isKindOfClass:[NSArray class]] && [parameters count] > 0) {
            id firstParam = parameters[0];
            if ([firstParam isKindOfClass:[NSDictionary class]]) {
                paramDict = firstParam;
                urlString = paramDict[@"url"] ?: @"";
            }
        }
        
        // 判断是否为 Surge 域名
        NSArray *surgeDomains = @[@"surge-activation.com", @"surge.com", @"nssurge.com"];
        BOOL isSurgeRequest = NO;
        for (NSString *domain in surgeDomains) {
            if ([urlString containsString:domain]) {
                isSurgeRequest = YES;
                break;
            }
        }
        
        // 处理 /ios/v3/refresh 请求
        if (isSurgeRequest && [urlString containsString:@"/ios/v3/refresh"]) {
            NSError *err = nil;
            NSData *reqData = lastRequestBody;
            NSDictionary *reqDict = reqData ? [NSJSONSerialization JSONObjectWithData:reqData options:kNilOptions error:&err] : nil;
            
            // 请求解析失败时返回错误
            if (err || !reqDict) {
                if (responseHandler) {
                    void (^handler)(NSData *, NSDictionary *, BOOL) = responseHandler;
                    handler(nil, nil, YES);
                }
                return;
            }
            
            // 生成 policy 字段
            NSString *deviceID = reqDict[@"deviceID"] ?: @"E63293CF436B";
            NSData *keydata = [deviceID SHA256];
            const char *keybytes = [keydata bytes];
            char licEncOut[32] = {0};
            size_t encRet = 0;

            CCCrypt(kCCEncrypt, kCCAlgorithmAES, kCCOptionPKCS7Padding, 
                    keybytes, kCCKeySizeAES256, keybytes + 16, 
                    LicEncContent, sizeof(LicEncContent), 
                    licEncOut, sizeof(licEncOut), &encRet);

            NSString *p = [[NSData dataWithBytes:licEncOut length:encRet] base64EncodedStringWithOptions:0];
            NSDictionary *licInfo = @{
                @"deviceID": deviceID,
                @"expirationDate": @(FIXED_EXPIRATION_DATE),
                @"fusDate": @(FIXED_EXPIRATION_DATE),
                @"type": @"licensed",
                @"issueDate": @((long)[[NSDate date] timeIntervalSince1970]),
                @"icloudBindKey": [NSNull null],
                @"p": p
            };
            
            NSData *licInfoData = [NSJSONSerialization dataWithJSONObject:licInfo options:0 error:&err];
            if (!licInfoData) {
                if (responseHandler) {
                    void (^handler)(NSData *, NSDictionary *, BOOL) = responseHandler;
                    handler(nil, nil, YES);
                }
                return;
            }
            
            NSString *licInfoBase64 = [licInfoData base64EncodedStringWithOptions:0];
            NSString *fakeSign = @"Mk5HEar4tsCWmJOOZWmE5LZzo9nrrVNQRDetupF/Uvatibipx+tAqCs4goSBDUFTWPqu/ItaYaI9T29AVmCcoJRPg0xPA5rhEtqjuaWkvzGBEwjt3r9pFgaSIswILtFVTRrLhyRT+qHPfMGpa6vRnFDw95sJhPa68UfuNOALd0mckPpl0hp/tTrcBcz8BArqHnEwnQrCE/Thm7BOEdKnyK4nPfmCiuRqcLEAv/kSg/3xC9uMZGp+Pr+UqtykGsMX5wvO4YnBppbOhgxuC6B9GgSxx2zSu6dzWpisv1ZMhxbosk6EjsuOqron+uxFMPpUH0oxB6DT9NZpyx6Ocb6RWA==";

            // 完善伪造响应，补充可能缺失的字段
            NSDictionary *fakeResponseDict = @{
                @"code": @0,
                @"license": @{
                    @"policy": licInfoBase64,
                    @"sign": fakeSign
                },
                @"messages": @[],
                @"serverTime": @((long)[[NSDate date] timeIntervalSince1970]),
                @"status": @"success",
                // 以下为可能缺失的字段，根据真实响应补充
                @"devices": @[@{@"id": @"1", @"name": [[UIDevice currentDevice] name]}], // 设备信息
                @"inactive": @(0) // 是否 inactive，0 表示活跃
            };
            
            NSData *fakeData = [NSJSONSerialization dataWithJSONObject:fakeResponseDict options:0 error:&err];
            if (responseHandler && fakeData) {
                void (^handler)(NSData *, NSDictionary *, BOOL) = responseHandler;
                handler(fakeData, @{@"Content-Type": @"application/json"}, NO);
                return;
            }
        }
    }
    
    // 调用原始方法
    %orig;
}

%end




// 声明 SGUProViewController 的接口
@interface SGUProViewController : UIViewController
- (void)restoreTapped:(id)sender;
- (void)configureView;
- (void)simulateRestoreSuccess;
@end

%hook SGUProViewController

- (void)restoreTapped:(id)sender {
    // 直接模拟成功恢复
    [self simulateRestoreSuccess];
}

%new
- (void)simulateRestoreSuccess {
    // 从现有网络 Hook 中提取一致的 deviceID
    NSString *deviceID = @"fake_device_id"; // 默认值，可以根据上下文动态获取

    // 生成伪造的 policy 数据
    NSData *keydata = [deviceID SHA256];
    const char *keybytes = [keydata bytes];
    char licEncOut[32] = {0};
    size_t encRet = 0;

    CCCrypt(kCCEncrypt, kCCAlgorithmAES, kCCOptionPKCS7Padding, keybytes, kCCKeySizeAES256,
            keybytes + 16, LicEncContent, sizeof(LicEncContent), licEncOut, sizeof(licEncOut), &encRet);

    NSString *p = [[NSData dataWithBytes:licEncOut length:encRet] base64EncodedStringWithOptions:0];
    NSDictionary *licInfo = @{
        @"deviceID": deviceID,
        @"expirationDate": @(FIXED_EXPIRATION_DATE),
        @"fusDate": @(FIXED_EXPIRATION_DATE),
        @"type": @"licensed",
        @"issueDate": @((long)[[NSDate date] timeIntervalSince1970]),
        @"icloudBindKey": [NSNull null],
        @"p": p
    };
    NSError *err = nil;
    NSData *licInfoData = [NSJSONSerialization dataWithJSONObject:licInfo options:0 error:&err];
    NSString *licInfoBase64 = [licInfoData base64EncodedStringWithOptions:0];
    NSString *fakeSign = @"Mk5HEar4tsCWmJOOZWmE5LZzo9nrrVNQRDetupF/Uvatibipx+tAqCs4goSBDUFTWPqu/ItaYaI9T29AVmCcoJRPg0xPA5rhEtqjuaWkvzGBEwjt3r9pFgaSIswILtFVTRrLhyRT+qHPfMGpa6vRnFDw95sJhPa68UfuNOALd0mckPpl0hp/tTrcBcz8BArqHnEwnQrCE/Thm7BOEdKnyK4nPfmCiuRqcLEAv/kSg/3xC9uMZGp+Pr+UqtykGsMX5wvO4YnBppbOhgxuC6B9GgSxx2zSu6dzWpisv1ZMhxbosk6EjsuOqron+uxFMPpUH0oxB6DT9NZpyx6Ocb6RWA==";

    // 构造伪造的成功响应，与 /ios/v3/refresh 的响应结构一致
    NSDictionary *successResponse = @{
        @"code": @0,
        @"license": @{
            @"policy": licInfoBase64,
            @"sign": fakeSign
        },
        @"messages": @[],
        @"status": @"success",
        @"serverTime": @((long)[[NSDate date] timeIntervalSince1970])
    };

    // 更新 _licenseResponse 变量
    Ivar ivar = class_getInstanceVariable([self class], "_licenseResponse");
    if (ivar) {
        object_setIvar(self, ivar, successResponse);
    } else {
        NSLog(@"Warning: _licenseResponse not found in SGUProViewController");
    }

    // 刷新 UI 和状态
    [self configureView];
}

%end




// ---------------------- SGULicenseViewController Hook ----------------------
//
// 对 SGULicenseViewController 中处理 license 响应的函数进行 Hook，
// 修改内部数据结构，对 license 信息进行伪造修改，如修改 expirationDate、plan 等字段，
// 同时增加设备信息，确保最终 license 数据符合预期，达到绕过校验的效果。
//

// SGULicenseViewController 接口
@interface SGULicenseViewController : UIViewController
@property (nonatomic, strong) NSDictionary *response;
- (void)reloadCells;
- (void)handleResponse:(NSDictionary *)response;
- (void)handleAsyncResponse:(NSDictionary *)response;
@end

%hook SGULicenseViewController

// Hook handleResponse 方法，确保 response 数据被正确处理
- (void)handleResponse:(NSDictionary *)response {
    %orig(response);
}

// Hook handleAsyncResponse，确保异步请求的 response 数据被正确处理
- (void)handleAsyncResponse:(NSDictionary *)response {
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        %orig(response);
    });
}

// 修改 _response 数据并伪造 License 信息
- (void)reloadCells {
    // 使用 KVC 获取 _response 并处理
    id response = [self valueForKey:@"_response"];
    if (![response isKindOfClass:[NSDictionary class]]) {
        NSMutableDictionary *defaultResponse = [NSMutableDictionary dictionary];
        defaultResponse[@"license"] = @{
            @"email": @"default@example.com",
            @"fusDate": @(FIXED_EXPIRATION_DATE),
            @"orderID": @"defaultOrderID",
            @"expirationDate": @(FIXED_EXPIRATION_DATE),
            @"plan": @"lifetime",
            @"status": @"active",
            @"licenseType": @"pro"
        };
        [self setValue:defaultResponse forKey:@"_response"];
        response = defaultResponse;
    }

    // 提取当前 _response 内容 ——> 修改 License 信息
    id oldResp = [self valueForKey:@"_response"];
    NSMutableDictionary *mutableResponse = [oldResp mutableCopy];
    NSMutableDictionary *license = [mutableResponse[@"license"] mutableCopy] ?: [NSMutableDictionary dictionary];

    // 更新 License 信息
    license[@"email"] = @"pxx@gmail.com";
    license[@"fusDate"] = @(FIXED_EXPIRATION_DATE);
    license[@"orderID"] = @"pxx917144686";
    license[@"expirationDate"] = @(FIXED_EXPIRATION_DATE);
    license[@"plan"] = @"lifetime";
    license[@"status"] = @"active";
    license[@"licenseType"] = @"pro";
    mutableResponse[@"license"] = license;

    // 添加当前设备信息
    NSString *deviceName = [[UIDevice currentDevice] name];
    NSMutableArray *devices = [NSMutableArray array];
    [devices addObject:@{
        @"id": @"1",
        @"model": @"当前设备",
        @"name": deviceName ?: @"当前设备"
    }];
    mutableResponse[@"devices"] = devices;

    // 设置设备状态
    mutableResponse[@"inactive"] = @(0);

    // 通过 KVC 更新 _response 变量
    [self setValue:[mutableResponse copy] forKey:@"_response"];

    // 触发 UI 刷新，确保界面更新与 Surge 内部 reloadCells 一致
    dispatch_async(dispatch_get_main_queue(), ^{
        [self.view setNeedsDisplay];
    });

    // 确保调用原方法
    %orig;
}

%end



// 手动声明 SGUTunnelManager 接口
@interface SGUTunnelManager : NSObject
- (id)init;
- (void)startWithCompletionHandler:(void (^)(NSError *))completionHandler;
- (BOOL)isCoreStarted;
- (BOOL)isReady;
- (BOOL)checkProxyStatus;
- (void)setValue:(id)value forKey:(NSString *)key;
@end

// 说明：添加通知并强制代理状态检查通过，确保 Surge 认为节点已连接。
%hook SGUTunnelManager
- (void)startWithCompletionHandler:(void (^)(NSError *))completionHandler {
    %orig(completionHandler); // 不强制成功
}
- (BOOL)checkProxyStatus {
    return %orig; // 返回真实状态
}
%end






%hook SGUNetworkManager
- (void)sendRequest:(id)request completion:(void (^)(id response, NSError *error))completion {
    // 获取请求的 URL
    NSURLRequest *req = (NSURLRequest *)request;
    NSString *urlString = req.URL.absoluteString;
    
    // 定义 Surge 内部请求的域名和路径
    NSArray *surgeDomains = @[@"surge-activation.com", @"surge.com", @"nssurge.com"];
    NSArray *surgePaths = @[@"/ios/v3/refresh", @"/ios/v3/device-management", @"/ios/v3/resource/module"];
    
    // 判断是否为 Surge 内部请求
    BOOL isSurgeRequest = NO;
    for (NSString *domain in surgeDomains) {
        if ([urlString containsString:domain]) {
            for (NSString *path in surgePaths) {
                if ([urlString hasSuffix:path]) {
                    isSurgeRequest = YES;
                    break;
                }
            }
        }
        if (isSurgeRequest) break;
    }
        
    // 如果是 Surge 内部请求，返回伪造响应
    if (isSurgeRequest) {
        NSDictionary *fakeResponse = @{
            @"code": @0,
            @"license": @{
                @"email": @"pxx@gmail.com",
                @"expirationDate": @(FIXED_EXPIRATION_DATE),
                @"plan": @"lifetime",
                @"status": @"active"
            },
            @"devices": @[@{@"id": @"1", @"name": [[UIDevice currentDevice] name]}],
            @"inactive": @(0),
            @"messages": @[],
            @"status": @"success"
        };
        NSLog(@"Returning fake response for: %@", urlString);
        if (completion) {
            completion(fakeResponse, nil);
        }
        return;
    }
    
    // 非 Surge 内部请求，调用原始方法
    %orig;
}
%end


// 强制 unlockTime = 0
%hook SGUProFeatureDefine
- (int64_t)unlockTime {
    return 0;
}
%end


// ===============================================
// 函数指针声明，用于保存原始函数地址
static int (*original_ptrace)(int, pid_t, caddr_t, int);              // ptrace 原始函数
static int (*original_sysctl)(int *, u_int, void *, size_t *, void *, size_t); // sysctl 原始函数
static int (*original_SSL_do_handshake)(void *);                      // SSL_do_handshake 原始函数
static char *(*original_getenv)(const char *);                        // getenv 原始函数
static int (*original_getaddrinfo)(const char *, const char *, const struct addrinfo *, struct addrinfo **); // getaddrinfo 原始函数

// SSL 相关函数声明
long SSL_get_verify_result(void *ssl);
const char *SSL_get_servername(void *ssl, int type);
typedef uint32_t SecCSFlags;
typedef void *SecRequirementRef;
kern_return_t SecCodeCheckValidity(void *code, SecCSFlags flags, SecRequirementRef requirement);

// =============================================
// Hook Surge 主程序中的 EVP_DigestVerifyFinal
uint64_t hooked_EVP_DigestVerifyFinal(void *ctx, uint64_t a2, uint64_t a3) {
    return 1; // 直接返回 1，绕过验证
}

// Hook libboringssl.dylib 中的 EVP_DigestVerifyFinal（通过 dlsym 获取）
int hooked_lib_EVP_DigestVerifyFinal(void *ctx, const unsigned char *sig, size_t siglen) {
    return 1; // 直接返回成功，绕过验证
}

// Hook libboringssl.dylib 中的 EVP_DigestVerify（通过 dlsym 获取）
int hooked_EVP_DigestVerify(void *ctx, const unsigned char *sig, size_t siglen) {
    return 1; // 直接返回成功，绕过验证
}

// Hook SSL_do_handshake，绕过 Surge 相关域名的握手验证
int hooked_SSL_do_handshake(void *ssl) {
    const char *servername = SSL_get_servername(ssl, TLSEXT_NAMETYPE_host_name);
    if (servername && (strstr(servername, "surge-activation.com") || strstr(servername, "surge.com"))) {
        return 1; // 强制握手成功，绕过验证
    }
    return original_SSL_do_handshake ? original_SSL_do_handshake(ssl) : 1; // 调用原始函数
}

// 绕过 SSL 客户端握手
int hooked_ssl_client_handshake(void *ssl) {
    return 1; 
}

// 绕过 SSL 会话握手续传
int hooked_boringssl_session_handshake_continue(void *ssl) {
    return 1; 
}

// Hook SSL_get_verify_result，强制 Surge 相关域名的证书验证成功
long hooked_SSL_get_verify_result(void *ssl) {
    const char *servername = SSL_get_servername(ssl, TLSEXT_NAMETYPE_host_name);
    if (servername && (strstr(servername, "surge-activation.com") || strstr(servername, "surge.com"))) {
        return X509_V_OK; // 返回证书验证成功
    }
    return SSL_get_verify_result(ssl); // 调用原始函数
}

// Hook SecCodeCheckValidity，绕过 Surge 的完整性检查
kern_return_t hooked_SecCodeCheckValidity(void *code, SecCSFlags flags, SecRequirementRef requirement) {
    return errSecSuccess; // 直接返回成功，绕过完整性检查
}

// Hook getaddrinfo，绕过 Surge 相关域名的解析
int hooked_getaddrinfo(const char *nodename, const char *servname, const struct addrinfo *hints, struct addrinfo **res) {
    if (nodename && (strstr(nodename, "surge-activation.com") || strstr(nodename, "surge.com"))) {
        // 可以返回一个伪造的地址，或者直接调用原始函数并修改结果
        return original_getaddrinfo(nodename, servname, hints, res); // 这里简单调用原始函数
    }
    return original_getaddrinfo(nodename, servname, hints, res); // 调用原始函数
}

// ============================= 反制越狱检测 Hook =============================
// 常见越狱路径
static NSArray *jailbreakPaths = @[
    @"/Applications/Cydia.app", @"/usr/bin/ssh", @"/var/lib/cydia", // 经典越狱路径
    @"/private/var/lib/dpkg/", @"/private/var/db/stash/", // iOS 15+ 有根越狱路径
    @"/var/jb", @"/var/jb/bin", @"/var/jb/usr/lib" // iOS 15+ 无根越狱路径
];

// 隐藏越狱路径
%hook NSFileManager
- (BOOL)fileExistsAtPath:(NSString *)path {
    static NSArray *jailbreakPaths = @[
        @"/Applications/Cydia.app", @"/usr/bin/ssh", @"/var/lib/cydia",
        @"/private/var/lib/dpkg/", @"/private/var/db/stash/",
        @"/var/jb", @"/var/jb/bin", @"/var/jb/usr/lib"
    ];
    for (NSString *jbPath in jailbreakPaths) {
        if ([path hasPrefix:jbPath]) {
            return NO; // 隐藏越狱路径
        }
    }
    return %orig; // 调用原始方法
}

- (BOOL)fileExistsAtPath:(NSString *)path isDirectory:(BOOL *)isDir {
    static NSArray *jailbreakPaths = @[
        @"/Applications/Cydia.app", @"/usr/bin/ssh", @"/var/lib/cydia",
        @"/private/var/lib/dpkg/", @"/private/var/db/stash/",
        @"/var/jb", @"/var/jb/bin", @"/var/jb/usr/lib"
    ];
    for (NSString *jbPath in jailbreakPaths) {
        if ([path hasPrefix:jbPath]) {
            if (isDir) *isDir = NO;
            return NO; // 隐藏越狱路径
        }
    }
    return %orig; // 调用原始方法
}
%end

// Hook getenv，隐藏越狱相关环境变量
char *hooked_getenv(const char *name) {
    if (name && (strcmp(name, "DYLD_INSERT_LIBRARIES") == 0 || strcmp(name, "_SafeMode") == 0 || strcmp(name, "CYDIA") == 0)) {
        return NULL; // 返回空，隐藏越狱痕迹
    }
    return original_getenv(name); // 调用原始函数
}

// ====================== 绕过 调试保护 ==========================
// Hook ptrace，绕过 Surge 的反调试保护
int hooked_ptrace(int request, pid_t pid, caddr_t addr, int data) {
    if (request == PT_DENY_ATTACH) {
        return 0; // 绕过 PT_DENY_ATTACH 检查，直接返回成功
    }
    return original_ptrace ? original_ptrace(request, pid, addr, data) : 0; // 调用原始函数
}

// Hook sysctl，伪装无调试器附加
int hooked_sysctl(int *name, u_int namelen, void *oldp, size_t *oldlenp, void *newp, size_t newlen) {
    int ret = original_sysctl(name, namelen, oldp, oldlenp, newp, newlen);
    if (namelen == 2 && name[0] == CTL_KERN && name[1] == KERN_PROC) {
        struct kinfo_proc *kp = (struct kinfo_proc *)oldp;
        if (kp && (kp->kp_proc.p_flag & P_TRACED)) {
            kp->kp_proc.p_flag &= ~P_TRACED; // 清除调试标志
        }
    }
    return ret; // 返回修改后的结果
}

// 绕过调试保护函数
void bypassDebugProtection() {
    void *ptrace_func = dlsym(RTLD_DEFAULT, "ptrace");
    if (ptrace_func) {
        MSHookFunction(ptrace_func, (void *)hooked_ptrace, (void **)&original_ptrace);
    }

    void *sysctl_func = dlsym(RTLD_DEFAULT, "sysctl");
    if (sysctl_func) {
        MSHookFunction(sysctl_func, (void *)hooked_sysctl, (void **)&original_sysctl);
    }
}

// 内存搜索函数，用于查找特征码
void *memmem(const void *haystack, size_t haystacklen, const void *needle, size_t needlelen) {
    if (needlelen == 0) return (void *)haystack;
    if (haystacklen < needlelen) return NULL;
    const unsigned char *p = haystack;
    size_t plen = haystacklen;
    while (plen >= needlelen) {
        if (memcmp(p, needle, needlelen) == 0) return (void *)p;
        p++;
        plen--;
    }
    return NULL;
}

// %ctor 中初始化所有 Hook，在 Surge 启动时生效
%ctor {
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
    });

    // Hook getaddrinfo
    void *getaddrinfo_func = dlsym(RTLD_DEFAULT, "getaddrinfo");
    if (getaddrinfo_func) {
        MSHookFunction(getaddrinfo_func, (void *)hooked_getaddrinfo, (void **)&original_getaddrinfo);
    }

    // Hook SSL 函数
    void *ssl_do_handshake_func = dlsym(RTLD_DEFAULT, "SSL_do_handshake");
    if (ssl_do_handshake_func) {
        MSHookFunction(ssl_do_handshake_func, (void *)hooked_SSL_do_handshake, (void **)&original_SSL_do_handshake);
    }

    void *ssl_verify_result_func = dlsym(RTLD_DEFAULT, "SSL_get_verify_result");
    if (ssl_verify_result_func) {
        MSHookFunction(ssl_verify_result_func, (void *)hooked_SSL_get_verify_result, NULL);
    }

    // Hook getenv
    void *getenv_func = dlsym(RTLD_DEFAULT, "getenv");
    if (getenv_func) {
        MSHookFunction(getenv_func, (void *)hooked_getenv, (void **)&original_getenv);
    }

    // 查找 Surge 主程序
    const char surgePath[] = "/private/var/containers/Bundle/Application";
    int surgeIndex = -1;
    for (int i = 0; i < _dyld_image_count(); i++) {
        const char *imageName = _dyld_get_image_name(i);
        if (imageName && strstr(imageName, surgePath)) {
            surgeIndex = i;
            break;
        }
    }
    if (surgeIndex == -1) return;

    // 获取 Surge 主程序基址
    const struct mach_header *surgeHeader = _dyld_get_image_header(surgeIndex);
    uintptr_t surgeBase = (uintptr_t)surgeHeader;

    // Surge 主程序特征码（36 字节）
    unsigned char needle_surge[] = {0xFF, 0x83, 0x02, 0xD1, 0xF8, 0x5F, 0x06, 0xA9, 0xF6, 0x57, 0x07, 0xA9, 0xF4, 0x4F, 0x08, 0xA9, 0xFD, 0x7B, 0x09, 0xA9, 0xFD, 0x43, 0x02, 0x91, 0xF3, 0x03, 0x02, 0xAA, 0xF4, 0x03, 0x01, 0xAA, 0xF5, 0x03, 0x00, 0xAA};
    size_t needle_surge_len = sizeof(needle_surge);

    // 搜索并 Hook Surge 中的 EVP_DigestVerifyFinal
    void *funcAddr_surge = memmem((void *)surgeBase, 0x400000, needle_surge, needle_surge_len);
    if (funcAddr_surge) {
        MSHookFunction(funcAddr_surge, (void *)hooked_EVP_DigestVerifyFinal, NULL);
    }

    // 查找 libboringssl.dylib
    int boringsslIndex = -1;
    for (int i = 0; i < _dyld_image_count(); i++) {
        const char *imageName = _dyld_get_image_name(i);
        if (imageName && strstr(imageName, "libboringssl.dylib")) {
            boringsslIndex = i;
            break;
        }
    }
    if (boringsslIndex == -1) return;

    // 获取 libboringssl.dylib 基址
    const struct mach_header *boringsslHeader = _dyld_get_image_header(boringsslIndex);
    uintptr_t boringsslBase = (uintptr_t)boringsslHeader;

    // libboringssl.dylib 中 EVP_DigestVerifyFinal 特征码（64 字节）
    unsigned char needle_lib[] = {0xFF, 0xC3, 0x02, 0xD1, 0xF6, 0x57, 0x08, 0xA9, 0xF4, 0x4F, 0x09, 0xA9, 0xFD, 0x7B, 0x0A, 0xA9, 0xFD, 0x83, 0x02, 0x91, 0x48, 0x3F, 0x2A, 0xB0, 0x08, 0xF9, 0x42, 0xF9, 0x08, 0x01, 0x40, 0xF9, 0xA8, 0x83, 0x1D, 0xF8, 0x08, 0x08, 0x40, 0xF9, 0x08, 0x01, 0x40, 0xF9, 0x08, 0x1D, 0x40, 0xF9, 0x48, 0x04, 0x00, 0xB4, 0xF3, 0x03, 0x02, 0xAA, 0xF4, 0x03, 0x01, 0xAA, 0xF5, 0x03, 0x00, 0xAA};
    size_t needle_lib_len = sizeof(needle_lib);

    // 搜索并 Hook libboringssl.dylib 中的 EVP_DigestVerifyFinal
    void *funcAddr_lib = memmem((void *)boringsslBase, 0x400000, needle_lib, needle_lib_len);
    if (funcAddr_lib) {
        MSHookFunction(funcAddr_lib, (void *)hooked_lib_EVP_DigestVerifyFinal, NULL);
    }

    // libboringssl.dylib 中 EVP_DigestVerify 特征码（64 字节）
    unsigned char needle_EVP_DigestVerify[] = {0xF6, 0x57, 0xBD, 0xA9, 0xF4, 0x4F, 0x01, 0xA9, 0xFD, 0x7B, 0x02, 0xA9, 0xFD, 0x83, 0x00, 0x91, 0xF3, 0x03, 0x02, 0xAA, 0xF4, 0x03, 0x01, 0xAA, 0xF5, 0x03, 0x00, 0xAA, 0x00, 0x08, 0x40, 0xF9, 0x08, 0x00, 0x40, 0xF9, 0x09, 0x1D, 0x40, 0xF9, 0xA9, 0x01, 0x00, 0xB4, 0xE0, 0x03, 0x15, 0xAA, 0xE1, 0x03, 0x03, 0xAA, 0xE2, 0x03, 0x04, 0xAA, 0x1B, 0xFF, 0xFF, 0x97, 0x00, 0x03, 0x00, 0x34};
    size_t needle_EVP_DigestVerify_len = sizeof(needle_EVP_DigestVerify);

    // 搜索并 Hook libboringssl.dylib 中的 EVP_DigestVerify
    void *funcAddr_evp = memmem((void *)boringsslBase, 0x400000, needle_EVP_DigestVerify, needle_EVP_DigestVerify_len);
    if (funcAddr_evp) {
        MSHookFunction(funcAddr_evp, (void *)hooked_EVP_DigestVerify, NULL);
    }

    // libboringssl.dylib 中 SSL_do_handshake 特征码（64 字节）
    unsigned char needle_SSL_do_handshake[] = {0xFF, 0xC3, 0x00, 0xD1, 0xF4, 0x4F, 0x01, 0xA9, 0xFD, 0x7B, 0x02, 0xA9, 0xFD, 0x83, 0x00, 0x91, 0xF3, 0x03, 0x00, 0xAA, 0x08, 0x18, 0x40, 0xF9, 0x1F, 0xBD, 0x00, 0xB9, 0x9F, 0x2A, 0x00, 0x94, 0xDA, 0x2A, 0x00, 0x94, 0x68, 0x16, 0x40, 0xF9, 0x68, 0x04, 0x00, 0xB4, 0x68, 0x1A, 0x40, 0xF9, 0x00, 0x89, 0x40, 0xF9, 0xC0, 0x03, 0x00, 0xB4, 0x08, 0xA0, 0x58, 0x39, 0x88, 0x03, 0x18, 0x37};
    size_t needle_SSL_do_handshake_len = sizeof(needle_SSL_do_handshake);

    // 搜索并 Hook libboringssl.dylib 中的 SSL_do_handshake
    void *funcAddr_ssl = memmem((void *)boringsslBase, 0x400000, needle_SSL_do_handshake, needle_SSL_do_handshake_len);
    if (funcAddr_ssl) {
        MSHookFunction(funcAddr_ssl, (void *)hooked_SSL_do_handshake, (void **)&original_SSL_do_handshake);
    }

    // libboringssl.dylib 中 ssl_client_handshake 特征码（64 字节）
    unsigned char needle_ssl_client_handshake[] = {0xFC, 0x6F, 0xBA, 0xA9, 0xFA, 0x67, 0x01, 0xA9, 0xF8, 0x5F, 0x02, 0xA9, 0xF6, 0x57, 0x03, 0xA9, 0xF4, 0x4F, 0x04, 0xA9, 0xFD, 0x7B, 0x05, 0xA9, 0xFD, 0x43, 0x01, 0x91, 0xFF, 0x03, 0x0B, 0xD1, 0xF3, 0x03, 0x00, 0xAA, 0x48, 0x3E, 0x2A, 0xD0, 0x08, 0xF9, 0x42, 0xF9, 0x08, 0x01, 0x40, 0xF9, 0x14, 0x50, 0x00, 0x91, 0x17, 0xA0, 0x17, 0x91, 0xA8, 0x83, 0x19, 0xF8, 0xE8, 0x83, 0x06, 0x91};
    size_t needle_ssl_client_handshake_len = sizeof(needle_ssl_client_handshake);

    // 搜索并 Hook libboringssl.dylib 中的 ssl_client_handshake
    void *funcAddr_ssl_client = memmem((void *)boringsslBase, 0x400000, needle_ssl_client_handshake, needle_ssl_client_handshake_len);
    if (funcAddr_ssl_client) {
        MSHookFunction(funcAddr_ssl_client, (void *)hooked_ssl_client_handshake, NULL);
    }

    // libboringssl.dylib 中 boringssl_session_handshake_continue 特征码（64 字节）
    unsigned char needle_boringssl_session_handshake_continue[] = {0xFF, 0x03, 0x02, 0xD1, 0xFA, 0x67, 0x03, 0xA9, 0xF8, 0x5F, 0x04, 0xA9, 0xF6, 0x57, 0x05, 0xA9, 0xF4, 0x4F, 0x06, 0xA9, 0xFD, 0x7B, 0x07, 0xA9, 0xFD, 0xC3, 0x01, 0x91, 0xE8, 0x41, 0x2A, 0xF0, 0x08, 0xF9, 0x42, 0xF9, 0x08, 0x01, 0x40, 0xF9, 0xE8, 0x17, 0x00, 0xF9, 0xA0, 0x06, 0x00, 0xB4, 0xF3, 0x03, 0x00, 0xAA, 0x08, 0x00, 0x40, 0xB9, 0x29, 0xAA, 0x96, 0x52, 0x29, 0xAA, 0xB6, 0x72};
    size_t needle_boringssl_session_handshake_continue_len = sizeof(needle_boringssl_session_handshake_continue);

    // 搜索并 Hook libboringssl.dylib 中的 boringssl_session_handshake_continue
    void *funcAddr_session = memmem((void *)boringsslBase, 0x400000, needle_boringssl_session_handshake_continue, needle_boringssl_session_handshake_continue_len);
    if (funcAddr_session) {
        MSHookFunction(funcAddr_session, (void *)hooked_boringssl_session_handshake_continue, NULL);
    }

    // Hook Security.framework 中的 SecCodeCheckValidity 使用特征码
    int securityIndex = -1;
    for (int i = 0; i < _dyld_image_count(); i++) {
        const char *imageName = _dyld_get_image_name(i);
        if (imageName && strstr(imageName, "Security.framework/Security")) {
            securityIndex = i;
            break;
        }
    }
    if (securityIndex != -1) {
        const struct mach_header *securityHeader = _dyld_get_image_header(securityIndex);
        uintptr_t securityBase = (uintptr_t)securityHeader;
        unsigned char needle_seccode[] = {0x03, 0x00, 0x80, 0xD2, 0x01, 0x00, 0x00, 0x14, 0xFF, 0x03, 0x01, 0xD1, 0xF6, 0x57, 0x01, 0xA9, 0xF4, 0x4F, 0x02, 0xA9, 0xFD, 0x7B, 0x03, 0xA9, 0xFD, 0xC3, 0x00, 0x91, 0xF3, 0x03, 0x03, 0xAA, 0xE8, 0xBD, 0x9B, 0x52, 0xC8, 0xFF, 0xA3, 0x72, 0x3F, 0x00, 0x08, 0x6A, 0x61, 0x06, 0x00, 0x54, 0xF4, 0x03, 0x02, 0xAA, 0xF5, 0x03, 0x01, 0xAA, 0xE8, 0xF3, 0x01, 0xB2, 0xE8, 0x07, 0x00, 0xF9};
        void *funcAddr_seccode = memmem((void *)securityBase, 0x400000, needle_seccode, sizeof(needle_seccode));
        if (funcAddr_seccode) {
            MSHookFunction(funcAddr_seccode, (void *)hooked_SecCodeCheckValidity, NULL);
        } else {
            // 如果特征码未找到，使用符号作为备用
            MSHookFunction((void *)SecCodeCheckValidity, (void *)hooked_SecCodeCheckValidity, NULL);
        }
    }

    // 调用绕过调试保护
    bypassDebugProtection();
}
